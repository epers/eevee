23  23:13:37.841 > …e/epers/eevee/modules/calc.mjs:24     QlobberFSQ.<anonymous>: (15): IPC "connected"
23  23:13:39.952 > …e/epers/eevee/modules/calc.mjs:18     QlobberFSQ.<anonymous>: (22): incoming IPC message: 
[Object] (6): {
    fname (73): 63616c632e72657175657374@s+1737ed0ccbf+m+5655e64c4fa174954105789b069ffe41
    path (100): /tmp/eevee/ipc/messages/d4/63616c632e72657175657374@s+1737ed0ccbf+m+5655e64c4fa174954105789b069ffe41
    topic (12): calc.request
    expires: 1595560479935
    single: false
    size: 422
}
(422): {"time":"2020-07-24T03:13:39.930Z","id":"4CDC339A","type":"chanmsg","text":"<calc 1+1","connector":"irc-parser@wetfish","platform":"irc","channel":"#botspam","nick":"Weazzy","ident":"Weazzy@lu.dicro.us","raw":{"type":"privmsg","from_server":false,"nick":"Weazzy","ident":"Weazzy","hostname":"lu.dicro.us","target":"#botspam","message":"<calc 1+1","tags":{}},"replyTo":"irc-connector.wetfish","command":"calc","args":"1+1"}
23  23:13:39.954 > …e/epers/eevee/modules/calc.mjs:42                       calc: (22): Calc request received:
[Object] (13): {
    time (24): 2020-07-24T03:13:39.930Z
    id (8): 4CDC339A
    type (7): chanmsg
    text (9): <calc 1+1
    connector (18): irc-parser@wetfish
    platform (3): irc
    channel (8): #botspam
    nick (6): Weazzy
    ident (18): Weazzy@lu.dicro.us
    raw [Object] (8): {
        type (7): privmsg
        from_server: false
        nick (6): Weazzy
        ident (6): Weazzy
        hostname (11): lu.dicro.us
        target (8): #botspam
        message (9): <calc 1+1
        tags [Object] (0): {}
    }
    replyTo (21): irc-connector.wetfish
    command (4): calc
    args (3): 1+1
}
23  23:13:39.957 > …e/epers/eevee/modules/calc.mjs:54                       calc: [Object] (1): {
    default [Object] (988): {
        config [Function] (7 lines): config function config(options) {
          if (options) {
            throw new Error('The global config is readonly. \n' + 'Please create a mathjs instance if you want to change the default configuration. \n' + 'Example:\n' + '\n' + '  import { create, all } from \'mathjs\';\n' + '  const mathjs = create(all);\n' + '  mathjs.config({ number: \'BigNumber\' });\n');
          }
        
          return Object.freeze(_config.DEFAULT_CONFIG);
        }
        IndexError [Function] (25 lines): IndexError function IndexError(index, min, max) {
          if (!(this instanceof IndexError)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.index = index;
        
          if (arguments.length < 3) {
            this.min = 0;
            this.max = min;
          } else {
            this.min = min;
            this.max = max;
          }
        
          if (this.min !== undefined && this.index < this.min) {
            this.message = 'Index out of range (' + this.index + ' < ' + this.min + ')';
          } else if (this.max !== undefined && this.index >= this.max) {
            this.message = 'Index out of range (' + this.index + ' > ' + (this.max - 1) + ')';
          } else {
            this.message = 'Index out of range (' + this.index + ')';
          }
        
          this.stack = new Error().stack;
        }
        DimensionError [Function] (11 lines): DimensionError function DimensionError(actual, expected, relation) {
          if (!(this instanceof DimensionError)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.actual = actual;
          this.expected = expected;
          this.relation = relation;
          this.message = 'Dimension mismatch (' + (Array.isArray(actual) ? '[' + actual.join(', ') + ']' : actual) + ' ' + (this.relation || '!=') + ' ' + (Array.isArray(expected) ? '[' + expected.join(', ') + ']' : expected) + ')';
          this.stack = new Error().stack;
        }
        ArgumentsError [Function] (12 lines): ArgumentsError function ArgumentsError(fn, count, min, max) {
          if (!(this instanceof ArgumentsError)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.fn = fn;
          this.count = count;
          this.min = min;
          this.max = max;
          this.message = 'Wrong number of arguments in function ' + fn + ' (' + count + ' provided, ' + min + (max !== undefined && max !== null ? '-' + max : '') + ' expected)';
          this.stack = new Error().stack;
        }
        create [Function] (146 lines): create function create(factories, config) {
          var configInternal = _extends({}, _config2.DEFAULT_CONFIG, config); // simple test for ES5 support
        
        
          if (typeof Object.create !== 'function') {
            throw new Error('ES5 not supported by this JavaScript engine. ' + 'Please load the es5-shim and es5-sham library for compatibility.');
          } // create the mathjs instance
        
        
          var math = emitter.mixin({
            // only here for backward compatibility for legacy factory functions
            isNumber: _is.isNumber,
            isComplex: _is.isComplex,
            isBigNumber: _is.isBigNumber,
            isFraction: _is.isFraction,
            isUnit: _is.isUnit,
            isString: _is.isString,
            isArray: _is.isArray,
            isMatrix: _is.isMatrix,
            isCollection: _is.isCollection,
            isDenseMatrix: _is.isDenseMatrix,
            isSparseMatrix: _is.isSparseMatrix,
            isRange: _is.isRange,
            isIndex: _is.isIndex,
            isBoolean: _is.isBoolean,
            isResultSet: _is.isResultSet,
            isHelp: _is.isHelp,
            isFunction: _is.isFunction,
            isDate: _is.isDate,
            isRegExp: _is.isRegExp,
            isObject: _is.isObject,
            isNull: _is.isNull,
            isUndefined: _is.isUndefined,
            isAccessorNode: _is.isAccessorNode,
            isArrayNode: _is.isArrayNode,
            isAssignmentNode: _is.isAssignmentNode,
            isBlockNode: _is.isBlockNode,
            isConditionalNode: _is.isConditionalNode,
            isConstantNode: _is.isConstantNode,
            isFunctionAssignmentNode: _is.isFunctionAssignmentNode,
            isFunctionNode: _is.isFunctionNode,
            isIndexNode: _is.isIndexNode,
            isNode: _is.isNode,
            isObjectNode: _is.isObjectNode,
            isOperatorNode: _is.isOperatorNode,
            isParenthesisNode: _is.isParenthesisNode,
            isRangeNode: _is.isRangeNode,
            isSymbolNode: _is.isSymbolNode,
            isChain: _is.isChain
          }); // load config function and apply provided config
        
          math.config = (0, _config.configFactory)(configInternal, math.emit);
          math.expression = {
            transform: {},
            mathWithTransform: {
              config: math.config
            }
          }; // cached factories and instances used by function load
        
          var legacyFactories = [];
          var legacyInst…
        factory [Function] (20 lines): factory function factory(name, dependencies, create, meta) {
          function assertAndCreate(scope) {
            // we only pass the requested dependencies to the factory function
            // to prevent functions to rely on dependencies that are not explicitly
            // requested.
            var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
            assertDependencies(name, dependencies, scope);
            return create(deps);
          }
        
          assertAndCreate.isFactory = true;
          assertAndCreate.fn = name;
          assertAndCreate.dependencies = dependencies.slice().sort();
        
          if (meta) {
            assertAndCreate.meta = meta;
          }
        
          return assertAndCreate;
        }
        ResultSet [Function] (7 lines): ResultSet function ResultSet(entries) {
          if (!(this instanceof ResultSet)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.entries = entries || [];
        }
        Complex [Function] (11 lines): Complex function Complex(a, b) {
        
          if (!(this instanceof Complex)) {
            return new Complex(a, b);
          }
        
          var z = parse(a, b);
        
          this['re'] = z['re'];
          this['im'] = z['im'];
        }
        Range [Function] (37 lines): Range function Range(start, end, step) {
          if (!(this instanceof Range)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          var hasStart = start !== null && start !== undefined;
          var hasEnd = end !== null && end !== undefined;
          var hasStep = step !== null && step !== undefined;
        
          if (hasStart) {
            if ((0, _is.isBigNumber)(start)) {
              start = start.toNumber();
            } else if (typeof start !== 'number') {
              throw new TypeError('Parameter start must be a number');
            }
          }
        
          if (hasEnd) {
            if ((0, _is.isBigNumber)(end)) {
              end = end.toNumber();
            } else if (typeof end !== 'number') {
              throw new TypeError('Parameter end must be a number');
            }
          }
        
          if (hasStep) {
            if ((0, _is.isBigNumber)(step)) {
              step = step.toNumber();
            } else if (typeof step !== 'number') {
              throw new TypeError('Parameter step must be a number');
            }
          }
        
          this.start = hasStart ? parseFloat(start) : 0;
          this.end = hasEnd ? parseFloat(end) : 0;
          this.step = hasStep ? parseFloat(step) : 1;
        }
        _false: false
        _null: <null>
        _true: true
        BigNumber [Function] (103 lines): Decimal function Decimal(v) {
          var e, i, t,
            x = this;
        
          // Decimal called without new.
          if (!(x instanceof Decimal)) return new Decimal(v);
        
          // Retain a reference to this Decimal constructor, and shadow Decimal.prototype.constructor
          // which points to Object.
          x.constructor = Decimal;
        
          // Duplicate.
          if (v instanceof Decimal) {
            x.s = v.s;
        
            if (external) {
              if (!v.d || v.e > Decimal.maxE) {
        
                // Infinity.
                x.e = NaN;
                x.d = null;
              } else if (v.e < Decimal.minE) {
        
                // Zero.
                x.e = 0;
                x.d = [0];
              } else {
                x.e = v.e;
                x.d = v.d.slice();
              }
            } else {
              x.e = v.e;
              x.d = v.d ? v.d.slice() : v.d;
            }
        
            return;
          }
        
          t = typeof v;
        
          if (t === 'number') {
            if (v === 0) {
              x.s = 1 / v < 0 ? -1 : 1;
              x.e = 0;
              x.d = [0];
              return;
            }
        
            if (v < 0) {
              v = -v;
              x.s = -1;
            } else {
              x.s = 1;
            }
        
            // Fast path for small integers.
            if (v === ~~v && v < 1e7) {
              for (e = 0, i = v; i >= 10; i /= 10) e++;
        
              if (external) {
                if (e > Decimal.maxE) {
                  x.e = NaN;
                  x.d = null;
                } else if (e < Decimal.minE) {
                  x.e = 0;
                  x.d = [0];
                } else {
                  x.e = e;
                  x.d = [v];
                }
              } else {
                x.e = e;
                x.d = [v];
              }
        
              return;
        
            // Infinity, NaN.
            } else if (v * 0 !== 0) {
              if (!v) x.s = NaN;
              x.e = NaN;
              x.d = null;
              return;
            }
        
            return parseDecimal(x, v.toString());
        
          } else if (t !== 'string') {
            throw Error(invalidArgument + v);
          }
        
          // Minus sign?
          if ((i = v.charCodeAt(0)) === 45) {
            v = v.slice(1);
            x.s = -1;
          } else {
            // Plus sign?
            if (i === 43) v = v.slice(1);
            x.s = 1;
          }
        
          return isDecimal.test(v) ? parseDecimal(x, v) : parseOther(x, v);
        }
        Matrix [Function] (5 lines): Matrix function Matrix() {
          if (!(this instanceof Matrix)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        }
        replacer [Function] (11 lines): replacer function replacer(key, value) {
          // the numeric values Infinitiy, -Infinity, and NaN cannot be serialized to JSON
          if (typeof value === 'number' && (!isFinite(value) || isNaN(value))) {
            return {
              mathjs: 'number',
              value: String(value)
            };
          }
        
          return value;
        }
        i [Object] (2): {
            re: 0
            im: 1
        }
        LN10: 2.302585092994046
        LOG10E: 0.4342944819032518
        _NaN: NaN
        pi: 3.141592653589793
        SQRT1_2: 0.7071067811865476
        tau: 6.283185307179586
        efimovFactor: 22.7
        fineStructure: 0.0072973525693
        sackurTetrode: -1.16487052358
        weakMixingAngle: 0.2229
        Fraction [Function] (18 lines): Fraction function Fraction(a, b) {
        
          if (!(this instanceof Fraction)) {
            return new Fraction(a, b);
          }
        
          parse(a, b);
        
          if (Fraction['REDUCE']) {
            a = gcd(P["d"], P["n"]); // Abuse a
          } else {
            a = 1;
          }
        
          this["s"] = P["s"];
          this["n"] = P["n"] / a;
          this["d"] = P["d"] / a;
        }
        e: 2.718281828459045
        _Infinity: Infinity
        LOG2E: 1.4426950408889634
        version (5): 7.1.0
        DenseMatrix [Function] (48 lines): DenseMatrix function DenseMatrix(data, datatype) {
          if (!(this instanceof DenseMatrix)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (datatype && !(0, _is.isString)(datatype)) {
            throw new Error('Invalid datatype: ' + datatype);
          }
        
          if ((0, _is.isMatrix)(data)) {
            // check data is a DenseMatrix
            if (data.type === 'DenseMatrix') {
              // clone data & size
              this._data = (0, _object.clone)(data._data);
              this._size = (0, _object.clone)(data._size);
              this._datatype = datatype || data._datatype;
            } else {
              // build data from existing matrix
              this._data = data.toArray();
              this._size = data.size();
              this._datatype = datatype || data._datatype;
            }
          } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
            // initialize fields from JSON representation
            this._data = data.data;
            this._size = data.size; // verify the dimensions of the array
        
            (0, _array.validate)(this._data, this._size);
            this._datatype = datatype || data.datatype;
          } else if ((0, _is.isArray)(data)) {
            // replace nested Matrices with Arrays
            this._data = preprocess(data); // get the dimensions of the array
        
            this._size = (0, _array.arraySize)(this._data); // verify the dimensions of the array, TODO: compute size while processing array
        
            (0, _array.validate)(this._data, this._size); // data type unknown
        
            this._datatype = datatype;
          } else if (data) {
            // unsupported type
            throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
          } else {
            // nothing provided
            this._data = [];
            this._size = [0];
            this._datatype = datatype;
          }
        }
        phi: 1.618033988749895
        typed [Function] (12 lines): typed function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isInteger [Function] (12 lines): isInteger function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isNumeric [Function] (12 lines): isNumeric function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isPositive [Function] (12 lines): isPositive function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isNaN [Function] (12 lines): isNaN function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        equalScalar [Function] (12 lines): equalScalar function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        number [Function] (12 lines): number function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        boolean [Function] (12 lines): boolean function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        complex [Function] (12 lines): complex function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        splitUnit [Function] (12 lines): splitUnit function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        unaryPlus [Function] (12 lines): unaryPlus function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        apply [Function] (12 lines): apply function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cube [Function] (12 lines): cube function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        expm1 [Function] (12 lines): expm1 function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        log10 [Function] (12 lines): log10 function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        multiplyScalar [Function] (12 lines): multiplyScalar function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sign [Function] (12 lines): sign function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        square [Function] (12 lines): square function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bitNot [Function] (12 lines): bitNot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        arg [Function] (12 lines): arg function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        im [Function] (12 lines): im function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        not [Function] (12 lines): not function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        filter [Function] (12 lines): filter function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        forEach [Function] (12 lines): forEach function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        map [Function] (12 lines): map function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        erf [Function] (12 lines): name function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        format [Function] (12 lines): format function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isPrime [Function] (12 lines): isPrime function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acos [Function] (12 lines): acos function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acot [Function] (12 lines): acot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acsc [Function] (12 lines): acsc function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        asec [Function] (12 lines): asec function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        asin [Function] (12 lines): asin function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        atan [Function] (12 lines): atan function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        atanh [Function] (12 lines): atanh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cosh [Function] (12 lines): cosh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        coth [Function] (12 lines): coth function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        csch [Function] (12 lines): csch function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sech [Function] (12 lines): sech function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sinh [Function] (12 lines): sinh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        tanh [Function] (12 lines): tanh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        combinations [Function] (12 lines): combinations function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        pickRandom [Function] (12 lines):  function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        randomInt [Function] (12 lines): randomInt function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        LN2: 0.6931471805599453
        clone [Function] (12 lines): clone function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        hasNumericValue [Function] (12 lines): hasNumericValue function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        typeOf [Function] (12 lines): typeOf function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        string [Function] (12 lines): string function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        fraction [Function] (12 lines): fraction function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        unaryMinus [Function] (12 lines): unaryMinus function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        addScalar [Function] (12 lines): addScalar function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        exp [Function] (12 lines): exp function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        log2 [Function] (12 lines): log2 function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sqrt [Function] (12 lines): sqrt function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        conj [Function] (12 lines): conj function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        getMatrixDataType [Function] (12 lines): getMatrixDataType function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        mode [Function] (12 lines): mode function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        print [Function] (12 lines): print function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acosh [Function] (12 lines): acosh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acsch [Function] (12 lines): acsch function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        asinh [Function] (12 lines): asinh function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cos [Function] (12 lines): cos function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        csc [Function] (12 lines): csc function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sin [Function] (12 lines): sin function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        combinationsWithRep [Function] (12 lines): combinationsWithRep function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        random [Function] (12 lines): random function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        SQRT2: 1.4142135623730951
        isNegative [Function] (12 lines): isNegative function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        SparseMatrix [Function] (34 lines): SparseMatrix function SparseMatrix(data, datatype) {
          if (!(this instanceof SparseMatrix)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (datatype && !(0, _is.isString)(datatype)) {
            throw new Error('Invalid datatype: ' + datatype);
          }
        
          if ((0, _is.isMatrix)(data)) {
            // create from matrix
            _createFromMatrix(this, data, datatype);
          } else if (data && (0, _is.isArray)(data.index) && (0, _is.isArray)(data.ptr) && (0, _is.isArray)(data.size)) {
            // initialize fields
            this._values = data.values;
            this._index = data.index;
            this._ptr = data.ptr;
            this._size = data.size;
            this._datatype = datatype || data.datatype;
          } else if ((0, _is.isArray)(data)) {
            // create from array
            _createFromArray(this, data, datatype);
          } else if (data) {
            // unsupported type
            throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
          } else {
            // nothing provided
            this._values = [];
            this._index = [];
            this._ptr = [0];
            this._size = [0, 0];
            this._datatype = datatype;
          }
        }
        matrix [Function] (12 lines): matrix function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cbrt [Function] (12 lines): cbrt function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        gcd [Function] (12 lines): gcd function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        mod [Function] (12 lines): mod function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        nthRoot [Function] (12 lines): nthRoot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        xgcd [Function] (12 lines): xgcd function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bitAnd [Function] (12 lines): bitAnd function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bitXor [Function] (12 lines): bitXor function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        or [Function] (12 lines): or function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        concat [Function] (12 lines): concat function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        diag [Function] (12 lines): diag function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        identity [Function] (12 lines): identity function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        ones [Function] (12 lines): ones function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        reshape [Function] (12 lines): reshape function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        size [Function] (12 lines): size function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        subset [Function] (12 lines): subset function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        zeros [Function] (12 lines): zeros function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        to [Function] (12 lines): to function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        round [Function] (12 lines): round function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        leftShift [Function] (12 lines): leftShift function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        rightLogShift [Function] (12 lines): rightLogShift function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        compare [Function] (12 lines): compare function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        compareText [Function] (12 lines): compareText function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        smaller [Function] (12 lines): smaller function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        larger [Function] (12 lines): larger function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        unequal [Function] (12 lines): unequal function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        ImmutableDenseMatrix [Function] (37 lines): ImmutableDenseMatrix function ImmutableDenseMatrix(data, datatype) {
          if (!(this instanceof ImmutableDenseMatrix)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (datatype && !(0, _is.isString)(datatype)) {
            throw new Error('Invalid datatype: ' + datatype);
          }
        
          if ((0, _is.isMatrix)(data) || (0, _is.isArray)(data)) {
            // use DenseMatrix implementation
            var matrix = new DenseMatrix(data, datatype); // internal structures
        
            this._data = matrix._data;
            this._size = matrix._size;
            this._datatype = matrix._datatype;
            this._min = null;
            this._max = null;
          } else if (data && (0, _is.isArray)(data.data) && (0, _is.isArray)(data.size)) {
            // initialize fields from JSON representation
            this._data = data.data;
            this._size = data.size;
            this._datatype = data.datatype;
            this._min = typeof data.min !== 'undefined' ? data.min : null;
            this._max = typeof data.max !== 'undefined' ? data.max : null;
          } else if (data) {
            // unsupported type
            throw new TypeError('Unsupported type of data (' + (0, _is.typeOf)(data) + ')');
          } else {
            // nothing provided
            this._data = [];
            this._size = [0];
            this._datatype = datatype;
            this._min = null;
            this._max = null;
          }
        }
        FibonacciHeap [Function] (9 lines): FibonacciHeap function FibonacciHeap() {
          if (!(this instanceof FibonacciHeap)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // initialize fields
        
        
          this._minimum = null;
          this._size = 0;
        }
        sparse [Function] (12 lines): sparse function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        acoth [Function] (12 lines): acoth function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        atan2 [Function] (12 lines): atan2 function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sec [Function] (12 lines): sec function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        add [Function] (12 lines): add function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        dot [Function] (12 lines): dot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        composition [Function] (12 lines): composition function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isZero [Function] (12 lines): isZero function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        abs [Function] (12 lines): abs function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        floor [Function] (12 lines): floor function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        multiply [Function] (12 lines): multiply function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        dotMultiply [Function] (12 lines): dotMultiply function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        re [Function] (12 lines): re function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        flatten [Function] (12 lines): flatten function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        resize [Function] (48 lines): resize function resize(x, size, defaultValue) {
          if (arguments.length !== 2 && arguments.length !== 3) {
            throw new _ArgumentsError.ArgumentsError('resize', arguments.length, 2, 3);
          }
        
          if ((0, _is.isMatrix)(size)) {
            size = size.valueOf(); // get Array
          }
        
          if ((0, _is.isBigNumber)(size[0])) {
            // convert bignumbers to numbers
            size = size.map(function (value) {
              return !(0, _is.isBigNumber)(value) ? value : value.toNumber();
            });
          } // check x is a Matrix
        
        
          if ((0, _is.isMatrix)(x)) {
            // use optimized matrix implementation, return copy
            return x.resize(size, defaultValue, true);
          }
        
          if (typeof x === 'string') {
            // resize string
            return _resizeString(x, size, defaultValue);
          } // check result should be a matrix
        
        
          var asMatrix = Array.isArray(x) ? false : config.matrix !== 'Array';
        
          if (size.length === 0) {
            // output a scalar
            while (Array.isArray(x)) {
              x = x[0];
            }
        
            return (0, _object.clone)(x);
          } else {
            // output an array/matrix
            if (!Array.isArray(x)) {
              x = [x];
            }
        
            x = (0, _object.clone)(x);
            var res = (0, _array.resize)(x, size, defaultValue);
            return asMatrix ? matrix(res) : res;
          }
        }
        squeeze [Function] (12 lines): squeeze function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        pow [Function] (12 lines): pow function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        dotPow [Function] (12 lines): dotPow function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        rightArithShift [Function] (12 lines): rightArithShift function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        compareNatural [Function] (12 lines): compareNatural function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        equalText [Function] (12 lines): equalText function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        largerEq [Function] (12 lines): largerEq function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        partitionSelect [Function] (12 lines): partitionSelect function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        Index [Function] (38 lines): Index function Index(ranges) {
          if (!(this instanceof Index)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this._dimensions = [];
          this._isScalar = true;
        
          for (var i = 0, ii = arguments.length; i < ii; i++) {
            var arg = arguments[i];
        
            if ((0, _is.isRange)(arg)) {
              this._dimensions.push(arg);
        
              this._isScalar = false;
            } else if (Array.isArray(arg) || (0, _is.isMatrix)(arg)) {
              // create matrix
              var m = _createImmutableMatrix(arg.valueOf());
        
              this._dimensions.push(m); // size
        
        
              var size = m.size(); // scalar
        
              if (size.length !== 1 || size[0] !== 1) {
                this._isScalar = false;
              }
            } else if (typeof arg === 'number') {
              this._dimensions.push(_createImmutableMatrix([arg]));
            } else if (typeof arg === 'string') {
              // object property (arguments.count should be 1)
              this._dimensions.push(arg);
            } else {
              throw new TypeError('Dimension must be an Array, Matrix, number, string, or Range');
            } // TODO: implement support for wildcard '*'
        
          }
        }
        asech [Function] (12 lines): asech function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        tan [Function] (12 lines): tan function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setDifference [Function] (12 lines): setDifference function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setIntersect [Function] (12 lines): setIntersect function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setMultiplicity [Function] (12 lines): setMultiplicity function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setSize [Function] (12 lines): setSize function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        norm [Function] (12 lines): norm function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        index [Function] (12 lines): index function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        quantileSeq [Function] (115 lines): quantileSeq function quantileSeq(data, probOrN, sorted) {
          var probArr, dataArr, one;
        
          if (arguments.length < 2 || arguments.length > 3) {
            throw new SyntaxError('Function quantileSeq requires two or three parameters');
          }
        
          if ((0, _is.isCollection)(data)) {
            sorted = sorted || false;
        
            if (typeof sorted === 'boolean') {
              dataArr = data.valueOf();
        
              if ((0, _is.isNumber)(probOrN)) {
                if (probOrN < 0) {
                  throw new Error('N/prob must be non-negative');
                }
        
                if (probOrN <= 1) {
                  // quantileSeq([a, b, c, d, ...], prob[,sorted])
                  return _quantileSeq(dataArr, probOrN, sorted);
                }
        
                if (probOrN > 1) {
                  // quantileSeq([a, b, c, d, ...], N[,sorted])
                  if (!(0, _number.isInteger)(probOrN)) {
                    throw new Error('N must be a positive integer');
                  }
        
                  var nPlusOne = probOrN + 1;
                  probArr = new Array(probOrN);
        
                  for (var i = 0; i < probOrN;) {
                    probArr[i] = _quantileSeq(dataArr, ++i / nPlusOne, sorted);
                  }
        
                  return probArr;
                }
              }
        
              if ((0, _is.isBigNumber)(probOrN)) {
                var BigNumber = probOrN.constructor;
        
                if (probOrN.isNegative()) {
                  throw new Error('N/prob must be non-negative');
                }
        
                one = new BigNumber(1);
        
                if (probOrN.lte(one)) {
                  // quantileSeq([a, b, c, d, ...], prob[,sorted])
                  return new BigNumber(_quantileSeq(dataArr, probOrN, sorted));
                }
        
                if (probOrN.gt(one)) {
                  // quantileSeq([a, b, c, d, ...], N[,sorted])
                  if (!probOrN.isInteger()) {
                    throw new Error('N must be a positive integer');
                  } // largest possible Array length is 2^32-1
                  // 2^32 < 10^15, thus safe conversion guaranteed
        
        
                  var intN = probOrN.toNumber();
        
                  if (intN > 4294967295) {
                    throw new Error('N must be less than or equal to 2^32-1, as that is the maximum length of an Array');
                  }
        
                  var _nPlusOne = new BigNumber(intN + 1);
        
            …
        gamma [Function] (12 lines): gamma function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bignumber [Function] (12 lines): bignumber function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        lcm [Function] (12 lines): lcm function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bitOr [Function] (12 lines): bitOr function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        kron [Function] (12 lines): kron function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        transpose [Function] (12 lines): transpose function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        numeric [Function] (17 lines): numeric function numeric(value, outputType) {
          var inputType = (0, _is.typeOf)(value);
        
          if (!(inputType in validInputTypes)) {
            throw new TypeError('Cannot convert ' + value + ' of type "' + inputType + '"; valid input types are ' + Object.keys(validInputTypes).join(', '));
          }
        
          if (!(outputType in validOutputTypes)) {
            throw new TypeError('Cannot convert ' + value + ' to type "' + outputType + '"; valid output types are ' + Object.keys(validOutputTypes).join(', '));
          }
        
          if (outputType === inputType) {
            return value;
          } else {
            return validOutputTypes[outputType](value);
          }
        }
        and [Function] (12 lines): and function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        smallerEq [Function] (12 lines): smallerEq function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sort [Function] (12 lines): sort function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        min [Function] (12 lines): min function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cot [Function] (12 lines): cot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setDistinct [Function] (12 lines): setDistinct function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setPowerset [Function] (12 lines): setPowerset function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        trace [Function] (12 lines): trace function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        sum [Function] (12 lines): sum function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        factorial [Function] (12 lines): factorial function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        permutations [Function] (12 lines): permutations function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        ceil [Function] (12 lines): ceil function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        subtract [Function] (12 lines): subtract function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        cross [Function] (12 lines): cross function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        ctranspose [Function] (12 lines): ctranspose function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        divideScalar [Function] (12 lines): divideScalar function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        nthRoots [Function] (12 lines): nthRoots function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        lsolve [Function] (12 lines): lsolve function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        equal [Function] (12 lines): equal function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        max [Function] (12 lines): max function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setCartesian [Function] (12 lines): setCartesian function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setSymDifference [Function] (12 lines): setSymDifference function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        hypot [Function] (12 lines): hypot function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        qr [Function] (12 lines): qr function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        distance [Function] (12 lines): distance function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        stirlingS2 [Function] (12 lines): stirlingS2 function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        catalan [Function] (12 lines): catalan function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        fix [Function] (12 lines): fix function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        range [Function] (12 lines): range function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        prod [Function] (12 lines): prod function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        dotDivide [Function] (12 lines): dotDivide function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        deepEqual [Function] (12 lines): deepEqual function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        Unit [Function] (40 lines): Unit function Unit(value, name) {
          if (!(this instanceof Unit)) {
            throw new Error('Constructor must be called with the new operator');
          }
        
          if (!(value === null || value === undefined || isNumeric(value) || (0, _is.isComplex)(value))) {
            throw new TypeError('First parameter in Unit constructor must be number, BigNumber, Fraction, Complex, or undefined');
          }
        
          if (name !== undefined && (typeof name !== 'string' || name === '')) {
            throw new TypeError('Second parameter in Unit constructor must be a string');
          }
        
          if (name !== undefined) {
            var u = Unit.parse(name);
            this.units = u.units;
            this.dimensions = u.dimensions;
          } else {
            this.units = [{
              unit: UNIT_NONE,
              prefix: PREFIXES.NONE,
              // link to a list with supported prefixes
              power: 0
            }];
            this.dimensions = [];
        
            for (var i = 0; i < BASE_DIMENSIONS.length; i++) {
              this.dimensions[i] = 0;
            }
          }
        
          this.value = value !== undefined && value !== null ? this._normalize(value) : null;
          this.fixPrefix = false; // if true, function format will not search for the
          // best prefix but leave it as initially provided.
          // fixPrefix is set true by the method Unit.to
          // The justification behind this is that if the constructor is explicitly called,
          // the caller wishes the units to be returned exactly as he supplied.
        
          this.skipAutomaticSimplification = true;
        }
        createUnit [Function] (12 lines): createUnit function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setUnion [Function] (12 lines): setUnion function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        slu [Function] (12 lines): slu function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        intersect [Function] (12 lines): intersect function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bellNumbers [Function] (12 lines): bellNumbers function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        atomicMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): g
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 0
                                2: 0
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (4): MASS
                        }
                        prefixes [Object] (21): {
                            [Object] (3): {
                                name (0): 
                                value: 1
                                scientific: true
                            }
                            da [Object] (3): {
                                name (2): da
                                value: 10
                                scientific: false
                            }
                            h [Object] (3): {
                                name (1): h
                                value: 100
                                scientific: false
                            }
                            k [Object] (3): {
                                name (1): k
                                value: 1000
                                scientific: true
                            }
                            M [Object] (3): {
                                name (1): M
                                value: 1000000
                                scientific: true
                            }
                            G [Object] (3): {
                                name (1): G
                                value: 1000000000
                                scientific: true
                            }
                            T [Object] (3): {
                                name (1): T
                                value: 1000000000000
                                scientific: true
                            }
                            P [Object] (3): {
                                name (1): P
                                value: 1000000000000000
                                scientific: true
                            }
                            E [Object] (3): {
                                name (1): E
                                value: 1000000000000000000
                                scientific: true
                            }
                            Z [Object] (3): {
                                name (1): Z
                                value: 1e+21
                                scientific: true
                            }
                            Y [Object] (3): {
                                name (1): Y
                                value: 1e+24
                                scientific: true
                            }
                            d [Object] (3): {
                                name (1): d
                                value: 0.1
                                scientific: false
                            }
                            c [Object] (3): {
                                name (1): c
                                value: 0.01
                                scientific: false
                            }
                            m [Object] (3): {
                                name (1): m
                                value: 0.001
                                scientific: true
                            }
                            u [Object] (3): {
                                name (1): u
                                value: 0.000001
                                scientific: true
                            }
                            n [Object] (3): {
                                name (1): n
                                value: 1e-9
                                scientific: true
                            }
                            p [Object] (3): {
                                name (1): p
                                value: 1e-12
                                scientific: true
                            }
                            f [Object] (3): {
                                name (1): f
                                value: 1e-15
                                scientific: true
                            }
                            a [Object] (3): {
                                name (1): a
                                value: 1e-18
                                scientific: true
                            }
                            z [Object] (3): {
                                name (1): z
                                value: 1e-21
                                scientific: true
                            }
                            y [Object] (3): {
                                name (1): y
                                value: 1e-24
                                scientific: true
                            }
                        }
                        value: 0.001
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.6605390666e-27
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        bohrMagneton [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): J
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 2
                                2: -2
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (6): ENERGY
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit [Object] (6): {
                        name (1): T
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 0
                                2: -2
                                3: -1
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (21): MAGNETIC_FLUX_DENSITY
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 2
                2: 0
                3: 1
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 9.2740100783e-24
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        boltzmann [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit [Object] (6): {
                        name (1): K
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 0
                                2: 0
                                3: 0
                                4: 1
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (11): TEMPERATURE
                        }
                        prefixes [Object] (1): {
                            [Object] (3): {
                                name (0): 
                                value: 1
                                scientific: true
                            }
                        }
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -2
                3: 0
                4: -1
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.380649e-23
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        conductanceQuantum [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): S
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: -1
                                1: -2
                                2: 3
                                3: 2
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (20): ELECTRIC_CONDUCTANCE
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: -1
                1: -2
                2: 3
                3: 2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 0.00007748091729863649
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        deuteronMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 3.3435830926e-27
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        electronMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 9.1093837015e-31
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        faraday [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): C
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 0
                                2: 1
                                3: 1
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (15): ELECTRIC_CHARGE
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit [Object] (6): {
                        name (3): mol
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 0
                                2: 0
                                3: 0
                                4: 0
                                5: 0
                                6: 1
                                7: 0
                                8: 0
                            ]
                            key (19): AMOUNT_OF_SUBSTANCE
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 1
                3: 1
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 96485.33212331001
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        firstRadiation [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): W
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 2
                                2: -3
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (5): POWER
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit [Object] (6): {
                        name (1): m
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 1
                                2: 0
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (6): LENGTH
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 2
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 4
                2: -3
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 3.7417718521927573e-16
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        gravitationConstant [Object] (5): {
            units [Array] (3): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 3
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
                2 [Object] (3): {
                    unit [Object] (6): {
                        name (1): s
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 0
                                2: 1
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (4): TIME
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -2
                }
            ]
            dimensions [Array] (9): [
                0: -1
                1: 3
                2: -2
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 6.6743e-11
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        hartreeEnergy [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -2
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 4.3597447222071e-18
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        klitzing [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (3): ohm
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 2
                                2: -3
                                3: -2
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (19): ELECTRIC_RESISTANCE
                        }
                        prefixes [Object] (41): {
                            [Object] (3): {
                                name (0): 
                                value: 1
                                scientific: true
                            }
                            da: <circular value object>
                            h: <circular value object>
                            k: <circular value object>
                            M: <circular value object>
                            G: <circular value object>
                            T: <circular value object>
                            P: <circular value object>
                            E: <circular value object>
                            Z: <circular value object>
                            Y: <circular value object>
                            d: <circular value object>
                            c: <circular value object>
                            m: <circular value object>
                            u: <circular value object>
                            n: <circular value object>
                            p: <circular value object>
                            f: <circular value object>
                            a: <circular value object>
                            z: <circular value object>
                            y: <circular value object>
                            deca [Object] (3): {
                                name (4): deca
                                value: 10
                                scientific: false
                            }
                            hecto [Object] (3): {
                                name (5): hecto
                                value: 100
                                scientific: false
                            }
                            kilo [Object] (3): {
                                name (4): kilo
                                value: 1000
                                scientific: true
                            }
                            mega [Object] (3): {
                                name (4): mega
                                value: 1000000
                                scientific: true
                            }
                            giga [Object] (3): {
                                name (4): giga
                                value: 1000000000
                                scientific: true
                            }
                            tera [Object] (3): {
                                name (4): tera
                                value: 1000000000000
                                scientific: true
                            }
                            peta [Object] (3): {
                                name (4): peta
                                value: 1000000000000000
                                scientific: true
                            }
                            exa [Object] (3): {
                                name (3): exa
                                value: 1000000000000000000
                                scientific: true
                            }
                            zetta [Object] (3): {
                                name (5): zetta
                                value: 1e+21
                                scientific: true
                            }
                            yotta [Object] (3): {
                                name (5): yotta
                                value: 1e+24
                                scientific: true
                            }
                            deci [Object] (3): {
                                name (4): deci
                                value: 0.1
                                scientific: false
                            }
                            centi [Object] (3): {
                                name (5): centi
                                value: 0.01
                                scientific: false
                            }
                            milli [Object] (3): {
                                name (5): milli
                                value: 0.001
                                scientific: true
                            }
                            micro [Object] (3): {
                                name (5): micro
                                value: 0.000001
                                scientific: true
                            }
                            nano [Object] (3): {
                                name (4): nano
                                value: 1e-9
                                scientific: true
                            }
                            pico [Object] (3): {
                                name (4): pico
                                value: 1e-12
                                scientific: true
                            }
                            femto [Object] (3): {
                                name (5): femto
                                value: 1e-15
                                scientific: true
                            }
                            atto [Object] (3): {
                                name (4): atto
                                value: 1e-18
                                scientific: true
                            }
                            zepto [Object] (3): {
                                name (5): zepto
                                value: 1e-21
                                scientific: true
                            }
                            yocto [Object] (3): {
                                name (5): yocto
                                value: 1e-24
                                scientific: true
                            }
                        }
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -3
                3: -2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 25812.807459304513
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        magneticConstant [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): N
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 1
                                2: -2
                                3: 0
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (5): FORCE
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit [Object] (6): {
                        name (1): A
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 0
                                1: 0
                                2: 0
                                3: 1
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (7): CURRENT
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -2
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 1
                2: -2
                3: -2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 0.00000125663706212
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        molarMass [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 0.00099999999965
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        molarPlanckConstant [Object] (5): {
            units [Array] (3): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                2 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -1
                3: 0
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 3.990312712893431e-10
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        neutronMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.6749271613e-27
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        planckCharge [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 1
                3: 1
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.87554603778e-18
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        planckLength [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.616255e-35
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        planckTemperature [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 0
                3: 0
                4: 1
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.416785e+32
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        protonMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.67262192369e-27
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        reducedPlanckConstant [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -1
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.0545718176461565e-34
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        secondRadiation [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: 0
                3: 0
                4: 1
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 0.014387768775039337
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        stefanBoltzmann [Object] (5): {
            units [Array] (3): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -2
                }
                2 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -4
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: -3
                3: 0
                4: -4
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 5.67037441918443e-8
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        vacuumImpedance [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -3
                3: -2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 376.730313667
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        xor [Function] (12 lines): xor function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        row [Function] (12 lines): row function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        usolve [Function] (12 lines): usolve function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        unit [Function] (12 lines): unit function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        avogadro [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 6.02214076e+23
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        classicalElectronRadius [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 2.8179403262e-15
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        electricConstant [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (1): F
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: -1
                                1: -2
                                2: 4
                                3: 2
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (20): ELECTRIC_CAPACITANCE
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: -1
                1: -3
                2: 4
                3: 2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 8.8541878128e-12
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        fermiCoupling [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (2): eV
                        base: <circular value object>
                        prefixes: <circular value object>
                        value: 1.602176565e-19
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: -2
                }
            ]
            dimensions [Array] (9): [
                0: -2
                1: -4
                2: 4
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 454379605398214.1
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        gravity [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -2
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: -2
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 9.80665
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        loschmidt [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -3
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: -3
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 2.686780111798444e+25
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        molarMassC12 [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 0.0119999999958
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        nuclearMagneton [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 2
                2: 0
                3: 1
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 5.0507837461e-27
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        planckMass [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 0
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 2.176435e-8
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        quantumOfCirculation [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 2
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 2
                2: -1
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 0.00036369475516
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        speedOfLight [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: -1
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 299792458
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        wienDisplacement [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: 0
                3: 0
                4: 1
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 0.002897771955
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        column [Function] (12 lines): column function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        Spa [Function] (9 lines): Spa function Spa() {
          if (!(this instanceof Spa)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // allocate vector, TODO use typed arrays
        
        
          this._values = [];
          this._heap = new FibonacciHeap();
        }
        lup [Function] (12 lines): lup function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        det [Function] (12 lines): det function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        bohrRadius [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 1
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 5.29177210903e-11
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        elementaryCharge [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 1
                3: 1
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 1.602176634e-19
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        inverseConductanceQuantum [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -3
                3: -2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 12906.403729652257
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        molarVolume [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 3
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 3
                2: 0
                3: 0
                4: 0
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 0.022413969545014137
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        planckTime [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 0
                2: 1
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 5.391245e-44
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        thomsonCrossSection [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 2
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: 2
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 6.6524587321e-29
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        log [Function] (12 lines): log function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        setIsSubset [Function] (12 lines): setIsSubset function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        lusolve [Function] (12 lines): lusolve function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        inv [Function] (12 lines): inv function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        expm [Function] (12 lines): expm function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        divide [Function] (12 lines): divide function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        median [Function] (12 lines): median function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        variance [Function] (12 lines): variance function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        kldivergence [Function] (12 lines): kldivergence function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        coulomb [Object] (5): {
            units [Array] (3): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 2
                }
                2 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -2
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 3
                2: -4
                3: -2
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 8987551792.261171
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        magneticFluxQuantum [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit [Object] (6): {
                        name (2): Wb
                        base [Object] (2): {
                            dimensions [Array] (9): [
                                0: 1
                                1: 2
                                2: -2
                                3: -1
                                4: 0
                                5: 0
                                6: 0
                                7: 0
                                8: 0
                            ]
                            key (13): MAGNETIC_FLUX
                        }
                        prefixes: <circular value object>
                        value: 1
                        offset: 0
                        dimensions: <circular value array>
                    }
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -2
                3: -1
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 2.0678338484619295e-15
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        rydberg [Object] (5): {
            units [Array] (1): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 0
                1: -1
                2: 0
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 10973731.56816
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        log1p [Function] (12 lines): log1p function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        eigs [Function] (12 lines): eigs function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        mean [Function] (12 lines): mean function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        std [Function] (12 lines): std function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        gasConstant [Object] (5): {
            units [Array] (3): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
                2 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: -1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -2
                3: 0
                4: -1
                5: 0
                6: -1
                7: 0
                8: 0
            ]
            value: 8.31446261815324
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        sqrtm [Function] (12 lines): sqrtm function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        multinomial [Function] (12 lines): multinomial function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        planckConstant [Object] (5): {
            units [Array] (2): [
                0 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
                1 [Object] (3): {
                    unit: <circular value object>
                    prefix: <circular value object>
                    power: 1
                }
            ]
            dimensions [Array] (9): [
                0: 1
                1: 2
                2: -1
                3: 0
                4: 0
                5: 0
                6: 0
                7: 0
                8: 0
            ]
            value: 6.62607015e-34
            fixPrefix: true
            skipAutomaticSimplification: true
        }
        mad [Function] (12 lines): mad function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        docs [Object] (262): {
            bignumber [Object] (6): {
                name (9): bignumber
                category (12): Construction
                syntax [Array] (1): [
                    0 (12): bignumber(x)
                ]
                description (44): Create a big number from a number or string.
                examples [Array] (5): [
                    0 (9): 0.1 + 0.2
                    1 (31): bignumber(0.1) + bignumber(0.2)
                    2 (16): bignumber("7.2")
                    3 (20): bignumber("7.2e500")
                    4 (26): bignumber([0.1, 0.2, 0.3])
                ]
                seealso [Array] (7): [
                    0 (7): boolean
                    1 (7): complex
                    2 (8): fraction
                    3 (5): index
                    4 (6): matrix
                    5 (6): string
                    6 (4): unit
                ]
            }
            boolean [Object] (6): {
                name (7): boolean
                category (12): Construction
                syntax [Array] (2): [
                    0 (1): x
                    1 (10): boolean(x)
                ]
                description (42): Convert a string or number into a boolean.
                examples [Array] (6): [
                    0 (10): boolean(0)
                    1 (10): boolean(1)
                    2 (10): boolean(3)
                    3 (15): boolean("true")
                    4 (16): boolean("false")
                    5 (21): boolean([1, 0, 1, 1])
                ]
                seealso [Array] (7): [
                    0 (9): bignumber
                    1 (7): complex
                    2 (5): index
                    3 (6): matrix
                    4 (6): number
                    5 (6): string
                    6 (4): unit
                ]
            }
            complex [Object] (6): {
                name (7): complex
                category (12): Construction
                syntax [Array] (3): [
                    0 (9): complex()
                    1 (15): complex(re, im)
                    2 (15): complex(string)
                ]
                description (24): Create a complex number.
                examples [Array] (3): [
                    0 (9): complex()
                    1 (13): complex(2, 3)
                    2 (17): complex("7 - 2i")
                ]
                seealso [Array] (7): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (5): index
                    3 (6): matrix
                    4 (6): number
                    5 (6): string
                    6 (4): unit
                ]
            }
            createUnit [Object] (6): {
                name (10): createUnit
                category (12): Construction
                syntax [Array] (2): [
                    0 (23): createUnit(definitions)
                    1 (28): createUnit(name, definition)
                ]
                description (62): Create a user-defined unit and register it with the Unit type.
                examples [Array] (3): [
                    0 (17): createUnit("foo")
                    1 (84): createUnit("knot", {definition: "0.514444444 m/s", aliases: ["knots", "kt", "kts"]})
                    2 (32): createUnit("mph", "1 mile/hour")
                ]
                seealso [Array] (2): [
                    0 (4): unit
                    1 (9): splitUnit
                ]
            }
            fraction [Object] (6): {
                name (8): fraction
                category (12): Construction
                syntax [Array] (2): [
                    0 (13): fraction(num)
                    1 (17): fraction(num,den)
                ]
                description (68): Create a fraction from a number or from a numerator and denominator.
                examples [Array] (2): [
                    0 (15): fraction(0.125)
                    1 (31): fraction(1, 3) + fraction(2, 5)
                ]
                seealso [Array] (7): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (5): index
                    4 (6): matrix
                    5 (6): string
                    6 (4): unit
                ]
            }
            index [Object] (6): {
                name (5): index
                category (12): Construction
                syntax [Array] (6): [
                    0 (7): [start]
                    1 (11): [start:end]
                    2 (16): [start:step:end]
                    3 (22): [start1, start 2, ...]
                    4 (31): [start1:end1, start2:end2, ...]
                    5 (43): [start1:step1:end1, start2:step2:end2, ...]
                ]
                description (54): Create an index to get or replace a subset of a matrix
                examples [Array] (6): [
                    0 (2): []
                    1 (9): [1, 2, 3]
                    2 (22): A = [1, 2, 3; 4, 5, 6]
                    3 (7): A[1, :]
                    4 (12): A[1, 2] = 50
                    5 (24): A[0:2, 0:2] = ones(2, 2)
                ]
                seealso [Array] (8): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (7): matrix,
                    4 (6): number
                    5 (5): range
                    6 (6): string
                    7 (4): unit
                ]
            }
            matrix [Object] (6): {
                name (6): matrix
                category (12): Construction
                syntax [Array] (5): [
                    0 (2): []
                    1 (26): [a1, b1, ...; a2, b2, ...]
                    2 (8): matrix()
                    3 (15): matrix("dense")
                    4 (13): matrix([...])
                ]
                description (16): Create a matrix.
                examples [Array] (7): [
                    0 (2): []
                    1 (9): [1, 2, 3]
                    2 (18): [1, 2, 3; 4, 5, 6]
                    3 (8): matrix()
                    4 (14): matrix([3, 4])
                    5 (30): matrix([3, 4; 5, 6], "sparse")
                    6 (40): matrix([3, 4; 5, 6], "sparse", "number")
                ]
                seealso [Array] (8): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (5): index
                    4 (6): number
                    5 (6): string
                    6 (4): unit
                    7 (6): sparse
                ]
            }
            number [Object] (6): {
                name (6): number
                category (12): Construction
                syntax [Array] (3): [
                    0 (1): x
                    1 (9): number(x)
                    2 (27): number(unit, valuelessUnit)
                ]
                description (61): Create a number or convert a string or boolean into a number.
                examples [Array] (8): [
                    0 (1): 2
                    1 (3): 2e3
                    2 (4): 4.05
                    3 (9): number(2)
                    4 (13): number("7.2")
                    5 (12): number(true)
                    6 (33): number([true, false, true, true])
                    7 (25): number(unit("52cm"), "m")
                ]
                seealso [Array] (8): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (8): fraction
                    4 (5): index
                    5 (6): matrix
                    6 (6): string
                    7 (4): unit
                ]
            }
            sparse [Object] (6): {
                name (6): sparse
                category (12): Construction
                syntax [Array] (3): [
                    0 (8): sparse()
                    1 (34): sparse([a1, b1, ...; a1, b2, ...])
                    2 (44): sparse([a1, b1, ...; a1, b2, ...], "number")
                ]
                description (23): Create a sparse matrix.
                examples [Array] (3): [
                    0 (8): sparse()
                    1 (20): sparse([3, 4; 5, 6])
                    2 (30): sparse([3, 0; 5, 0], "number")
                ]
                seealso [Array] (8): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (5): index
                    4 (6): number
                    5 (6): string
                    6 (4): unit
                    7 (6): matrix
                ]
            }
            splitUnit [Object] (6): {
                name (9): splitUnit
                category (12): Construction
                syntax [Array] (1): [
                    0 (36): splitUnit(unit: Unit, parts: Unit[])
                ]
                description (74): Split a unit in an array of units whose sum is equal to the original unit.
                examples [Array] (1): [
                    0 (32): splitUnit(1 m, ["feet", "inch"])
                ]
                seealso [Array] (2): [
                    0 (4): unit
                    1 (10): createUnit
                ]
            }
            string [Object] (6): {
                name (6): string
                category (12): Construction
                syntax [Array] (2): [
                    0 (6): "text"
                    1 (9): string(x)
                ]
                description (46): Create a string or convert a value to a string
                examples [Array] (3): [
                    0 (14): "Hello World!"
                    1 (11): string(4.2)
                    2 (14): string(3 + 2i)
                ]
                seealso [Array] (7): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (5): index
                    4 (6): matrix
                    5 (6): number
                    6 (4): unit
                ]
            }
            unit [Object] (6): {
                name (4): unit
                category (12): Construction
                syntax [Array] (3): [
                    0 (10): value unit
                    1 (17): unit(value, unit)
                    2 (12): unit(string)
                ]
                description (14): Create a unit.
                examples [Array] (4): [
                    0 (6): 5.5 mm
                    1 (6): 3 inch
                    2 (21): unit(7.1, "kilogram")
                    3 (14): unit("23 deg")
                ]
                seealso [Array] (7): [
                    0 (9): bignumber
                    1 (7): boolean
                    2 (7): complex
                    3 (5): index
                    4 (6): matrix
                    5 (6): number
                    6 (6): string
                ]
            }
            e [Object] (6): {
                name (1): e
                category (9): Constants
                syntax [Array] (1): [
                    0 (1): e
                ]
                description (81): Euler's number, the base of the natural logarithm. Approximately equal to 2.71828
                examples [Array] (4): [
                    0 (1): e
                    1 (5): e ^ 2
                    2 (6): exp(2)
                    3 (6): log(e)
                ]
                seealso [Array] (1): [
                    0 (3): exp
                ]
            }
            E: <circular value object>
            false [Object] (6): {
                name (5): false
                category (9): Constants
                syntax [Array] (1): [
                    0 (5): false
                ]
                description (19): Boolean value false
                examples [Array] (1): [
                    0 (5): false
                ]
                seealso [Array] (1): [
                    0 (4): true
                ]
            }
            i [Object] (6): {
                name (1): i
                category (9): Constants
                syntax [Array] (1): [
                    0 (1): i
                ]
                description (131): Imaginary unit, defined as i*i=-1. A complex number is described as a + b*i, where a is the real part, and b is the imaginary part.
                examples [Array] (3): [
                    0 (1): i
                    1 (5): i * i
                    2 (8): sqrt(-1)
                ]
                seealso [Array] (0): []
            }
            Infinity [Object] (6): {
                name (8): Infinity
                category (9): Constants
                syntax [Array] (1): [
                    0 (8): Infinity
                ]
                description (106): Infinity, a number which is larger than the maximum number that can be handled by a floating point number.
                examples [Array] (2): [
                    0 (8): Infinity
                    1 (5): 1 / 0
                ]
                seealso [Array] (0): []
            }
            LN2 [Object] (6): {
                name (3): LN2
                category (9): Constants
                syntax [Array] (1): [
                    0 (3): LN2
                ]
                description (64): Returns the natural logarithm of 2, approximately equal to 0.693
                examples [Array] (2): [
                    0 (3): LN2
                    1 (6): log(2)
                ]
                seealso [Array] (0): []
            }
            LN10 [Object] (6): {
                name (4): LN10
                category (9): Constants
                syntax [Array] (1): [
                    0 (4): LN10
                ]
                description (65): Returns the natural logarithm of 10, approximately equal to 2.302
                examples [Array] (2): [
                    0 (4): LN10
                    1 (7): log(10)
                ]
                seealso [Array] (0): []
            }
            LOG2E [Object] (6): {
                name (5): LOG2E
                category (9): Constants
                syntax [Array] (1): [
                    0 (5): LOG2E
                ]
                description (63): Returns the base-2 logarithm of E, approximately equal to 1.442
                examples [Array] (2): [
                    0 (5): LOG2E
                    1 (9): log(e, 2)
                ]
                seealso [Array] (0): []
            }
            LOG10E [Object] (6): {
                name (6): LOG10E
                category (9): Constants
                syntax [Array] (1): [
                    0 (6): LOG10E
                ]
                description (64): Returns the base-10 logarithm of E, approximately equal to 0.434
                examples [Array] (2): [
                    0 (6): LOG10E
                    1 (10): log(e, 10)
                ]
                seealso [Array] (0): []
            }
            NaN [Object] (6): {
                name (3): NaN
                category (9): Constants
                syntax [Array] (1): [
                    0 (3): NaN
                ]
                description (12): Not a number
                examples [Array] (2): [
                    0 (3): NaN
                    1 (5): 0 / 0
                ]
                seealso [Array] (0): []
            }
            null [Object] (6): {
                name (4): null
                category (9): Constants
                syntax [Array] (1): [
                    0 (4): null
                ]
                description (10): Value null
                examples [Array] (1): [
                    0 (4): null
                ]
                seealso [Array] (2): [
                    0 (4): true
                    1 (5): false
                ]
            }
            pi [Object] (6): {
                name (2): pi
                category (9): Constants
                syntax [Array] (1): [
                    0 (2): pi
                ]
                description (141): The number pi is a mathematical constant that is the ratio of a circle's circumference to its diameter, and is approximately equal to 3.14159
                examples [Array] (2): [
                    0 (2): pi
                    1 (9): sin(pi/2)
                ]
                seealso [Array] (1): [
                    0 (3): tau
                ]
            }
            PI: <circular value object>
            phi [Object] (6): {
                name (3): phi
                category (9): Constants
                syntax [Array] (1): [
                    0 (3): phi
                ]
                description (224): Phi is the golden ratio. Two quantities are in the golden ratio if their ratio is the same as the ratio of their sum to the larger of the two quantities. Phi is defined as `(1 + sqrt(5)) / 2` and is approximately 1.618034...
                examples [Array] (1): [
                    0 (3): phi
                ]
                seealso [Array] (0): []
            }
            SQRT1_2 [Object] (6): {
                name (7): SQRT1_2
                category (9): Constants
                syntax [Array] (1): [
                    0 (7): SQRT1_2
                ]
                description (60): Returns the square root of 1/2, approximately equal to 0.707
                examples [Array] (2): [
                    0 (7): SQRT1_2
                    1 (9): sqrt(1/2)
                ]
                seealso [Array] (0): []
            }
            SQRT2 [Object] (6): {
                name (5): SQRT2
                category (9): Constants
                syntax [Array] (1): [
                    0 (5): SQRT2
                ]
                description (58): Returns the square root of 2, approximately equal to 1.414
                examples [Array] (2): [
                    0 (5): SQRT2
                    1 (7): sqrt(2)
                ]
                seealso [Array] (0): []
            }
            tau [Object] (6): {
                name (3): tau
                category (9): Constants
                syntax [Array] (1): [
                    0 (3): tau
                ]
                description (103): Tau is the ratio constant of a circle's circumference to radius, equal to 2 * pi, approximately 6.2832.
                examples [Array] (2): [
                    0 (3): tau
                    1 (6): 2 * pi
                ]
                seealso [Array] (1): [
                    0 (2): pi
                ]
            }
            true [Object] (6): {
                name (4): true
                category (9): Constants
                syntax [Array] (1): [
                    0 (4): true
                ]
                description (18): Boolean value true
                examples [Array] (1): [
                    0 (4): true
                ]
                seealso [Array] (1): [
                    0 (5): false
                ]
            }
            version [Object] (6): {
                name (7): version
                category (9): Constants
                syntax [Array] (1): [
                    0 (7): version
                ]
                description (43): A string with the version number of math.js
                examples [Array] (1): [
                    0 (7): version
                ]
                seealso [Array] (0): []
            }
            speedOfLight [Object] (2): {
                description (24): Speed of light in vacuum
                examples [Array] (1): [
                    0 (12): speedOfLight
                ]
            }
            gravitationConstant [Object] (2): {
                description (33): Newtonian constant of gravitation
                examples [Array] (1): [
                    0 (19): gravitationConstant
                ]
            }
            planckConstant [Object] (2): {
                description (15): Planck constant
                examples [Array] (1): [
                    0 (14): planckConstant
                ]
            }
            reducedPlanckConstant [Object] (2): {
                description (23): Reduced Planck constant
                examples [Array] (1): [
                    0 (21): reducedPlanckConstant
                ]
            }
            magneticConstant [Object] (2): {
                description (39): Magnetic constant (vacuum permeability)
                examples [Array] (1): [
                    0 (16): magneticConstant
                ]
            }
            electricConstant [Object] (2): {
                description (39): Electric constant (vacuum permeability)
                examples [Array] (1): [
                    0 (16): electricConstant
                ]
            }
            vacuumImpedance [Object] (2): {
                description (34): Characteristic impedance of vacuum
                examples [Array] (1): [
                    0 (15): vacuumImpedance
                ]
            }
            coulomb [Object] (2): {
                description (18): Coulomb's constant
                examples [Array] (1): [
                    0 (7): coulomb
                ]
            }
            elementaryCharge [Object] (2): {
                description (17): Elementary charge
                examples [Array] (1): [
                    0 (16): elementaryCharge
                ]
            }
            bohrMagneton [Object] (2): {
                description (13): Borh magneton
                examples [Array] (1): [
                    0 (12): bohrMagneton
                ]
            }
            conductanceQuantum [Object] (2): {
                description (19): Conductance quantum
                examples [Array] (1): [
                    0 (18): conductanceQuantum
                ]
            }
            inverseConductanceQuantum [Object] (2): {
                description (27): Inverse conductance quantum
                examples [Array] (1): [
                    0 (25): inverseConductanceQuantum
                ]
            }
            magneticFluxQuantum [Object] (2): {
                description (21): Magnetic flux quantum
                examples [Array] (1): [
                    0 (19): magneticFluxQuantum
                ]
            }
            nuclearMagneton [Object] (2): {
                description (16): Nuclear magneton
                examples [Array] (1): [
                    0 (15): nuclearMagneton
                ]
            }
            klitzing [Object] (2): {
                description (21): Von Klitzing constant
                examples [Array] (1): [
                    0 (8): klitzing
                ]
            }
            bohrRadius [Object] (2): {
                description (11): Borh radius
                examples [Array] (1): [
                    0 (10): bohrRadius
                ]
            }
            classicalElectronRadius [Object] (2): {
                description (25): Classical electron radius
                examples [Array] (1): [
                    0 (23): classicalElectronRadius
                ]
            }
            electronMass [Object] (2): {
                description (13): Electron mass
                examples [Array] (1): [
                    0 (12): electronMass
                ]
            }
            fermiCoupling [Object] (2): {
                description (23): Fermi coupling constant
                examples [Array] (1): [
                    0 (13): fermiCoupling
                ]
            }
            fineStructure [Object] (2): {
                description (23): Fine-structure constant
                examples [Array] (1): [
                    0 (13): fineStructure
                ]
            }
            hartreeEnergy [Object] (2): {
                description (14): Hartree energy
                examples [Array] (1): [
                    0 (13): hartreeEnergy
                ]
            }
            protonMass [Object] (2): {
                description (11): Proton mass
                examples [Array] (1): [
                    0 (10): protonMass
                ]
            }
            deuteronMass [Object] (2): {
                description (13): Deuteron Mass
                examples [Array] (1): [
                    0 (12): deuteronMass
                ]
            }
            neutronMass [Object] (2): {
                description (12): Neutron mass
                examples [Array] (1): [
                    0 (11): neutronMass
                ]
            }
            quantumOfCirculation [Object] (2): {
                description (22): Quantum of circulation
                examples [Array] (1): [
                    0 (20): quantumOfCirculation
                ]
            }
            rydberg [Object] (2): {
                description (16): Rydberg constant
                examples [Array] (1): [
                    0 (7): rydberg
                ]
            }
            thomsonCrossSection [Object] (2): {
                description (21): Thomson cross section
                examples [Array] (1): [
                    0 (19): thomsonCrossSection
                ]
            }
            weakMixingAngle [Object] (2): {
                description (17): Weak mixing angle
                examples [Array] (1): [
                    0 (15): weakMixingAngle
                ]
            }
            efimovFactor [Object] (2): {
                description (13): Efimov factor
                examples [Array] (1): [
                    0 (12): efimovFactor
                ]
            }
            atomicMass [Object] (2): {
                description (20): Atomic mass constant
                examples [Array] (1): [
                    0 (10): atomicMass
                ]
            }
            avogadro [Object] (2): {
                description (17): Avogadro's number
                examples [Array] (1): [
                    0 (8): avogadro
                ]
            }
            boltzmann [Object] (2): {
                description (18): Boltzmann constant
                examples [Array] (1): [
                    0 (9): boltzmann
                ]
            }
            faraday [Object] (2): {
                description (16): Faraday constant
                examples [Array] (1): [
                    0 (7): faraday
                ]
            }
            firstRadiation [Object] (2): {
                description (24): First radiation constant
                examples [Array] (1): [
                    0 (14): firstRadiation
                ]
            }
            loschmidt [Object] (2): {
                description (50): Loschmidt constant at T=273.15 K and p=101.325 kPa
                examples [Array] (1): [
                    0 (9): loschmidt
                ]
            }
            gasConstant [Object] (2): {
                description (12): Gas constant
                examples [Array] (1): [
                    0 (11): gasConstant
                ]
            }
            molarPlanckConstant [Object] (2): {
                description (21): Molar Planck constant
                examples [Array] (1): [
                    0 (19): molarPlanckConstant
                ]
            }
            molarVolume [Object] (2): {
                description (60): Molar volume of an ideal gas at T=273.15 K and p=101.325 kPa
                examples [Array] (1): [
                    0 (11): molarVolume
                ]
            }
            sackurTetrode [Object] (2): {
                description (50): Sackur-Tetrode constant at T=1 K and p=101.325 kPa
                examples [Array] (1): [
                    0 (13): sackurTetrode
                ]
            }
            secondRadiation [Object] (2): {
                description (25): Second radiation constant
                examples [Array] (1): [
                    0 (15): secondRadiation
                ]
            }
            stefanBoltzmann [Object] (2): {
                description (25): Stefan-Boltzmann constant
                examples [Array] (1): [
                    0 (15): stefanBoltzmann
                ]
            }
            wienDisplacement [Object] (2): {
                description (30): Wien displacement law constant
                examples [Array] (1): [
                    0 (16): wienDisplacement
                ]
            }
            molarMass [Object] (2): {
                description (19): Molar mass constant
                examples [Array] (1): [
                    0 (9): molarMass
                ]
            }
            molarMassC12 [Object] (2): {
                description (32): Molar mass constant of carbon-12
                examples [Array] (1): [
                    0 (12): molarMassC12
                ]
            }
            gravity [Object] (2): {
                description (78): Standard acceleration of gravity (standard acceleration of free-fall on Earth)
                examples [Array] (1): [
                    0 (7): gravity
                ]
            }
            planckLength [Object] (2): {
                description (13): Planck length
                examples [Array] (1): [
                    0 (12): planckLength
                ]
            }
            planckMass [Object] (2): {
                description (11): Planck mass
                examples [Array] (1): [
                    0 (10): planckMass
                ]
            }
            planckTime [Object] (2): {
                description (11): Planck time
                examples [Array] (1): [
                    0 (10): planckTime
                ]
            }
            planckCharge [Object] (2): {
                description (13): Planck charge
                examples [Array] (1): [
                    0 (12): planckCharge
                ]
            }
            planckTemperature [Object] (2): {
                description (18): Planck temperature
                examples [Array] (1): [
                    0 (17): planckTemperature
                ]
            }
            derivative [Object] (6): {
                name (10): derivative
                category (7): Algebra
                syntax [Array] (2): [
                    0 (26): derivative(expr, variable)
                    1 (47): derivative(expr, variable, {simplify: boolean})
                ]
                description (233): Takes the derivative of an expression expressed in parser Nodes. The derivative will be taken over the supplied variable in the second parameter. If there are multiple variables in the expression, it will return a partial derivative.
                examples [Array] (8): [
                    0 (23): derivative("2x^3", "x")
                    1 (42): derivative("2x^3", "x", {simplify: false})
                    2 (32): derivative("2x^2 + 3x + 4", "x")
                    3 (26): derivative("sin(2x)", "x")
                    4 (20): f = parse("x^2 + x")
                    5 (14): x = parse("x")
                    6 (21): df = derivative(f, x)
                    7 (19): df.evaluate({x: 3})
                ]
                seealso [Array] (3): [
                    0 (8): simplify
                    1 (5): parse
                    2 (8): evaluate
                ]
            }
            lsolve [Object] (6): {
                name (6): lsolve
                category (7): Algebra
                syntax [Array] (1): [
                    0 (14): x=lsolve(L, b)
                ]
                description (110): Solves the linear system L * x = b where L is an [n x n] lower triangular matrix and b is a [n] column vector.
                examples [Array] (3): [
                    0 (17): a = [-2, 3; 2, 1]
                    1 (11): b = [11, 9]
                    2 (16): x = lsolve(a, b)
                ]
                seealso [Array] (5): [
                    0 (3): lup
                    1 (7): lusolve
                    2 (6): usolve
                    3 (6): matrix
                    4 (6): sparse
                ]
            }
            lup [Object] (6): {
                name (3): lup
                category (7): Algebra
                syntax [Array] (1): [
                    0 (6): lup(m)
                ]
                description (131): Calculate the Matrix LU decomposition with partial pivoting. Matrix A is decomposed in three matrices (L, U, P) where P * A = L * U
                examples [Array] (3): [
                    0 (21): lup([[2, 1], [1, 4]])
                    1 (29): lup(matrix([[2, 1], [1, 4]]))
                    2 (29): lup(sparse([[2, 1], [1, 4]]))
                ]
                seealso [Array] (7): [
                    0 (7): lusolve
                    1 (6): lsolve
                    2 (6): usolve
                    3 (6): matrix
                    4 (6): sparse
                    5 (3): slu
                    6 (2): qr
                ]
            }
            lusolve [Object] (6): {
                name (7): lusolve
                category (7): Algebra
                syntax [Array] (2): [
                    0 (15): x=lusolve(A, b)
                    1 (16): x=lusolve(lu, b)
                ]
                description (93): Solves the linear system A * x = b where A is an [n x n] matrix and b is a [n] column vector.
                examples [Array] (3): [
                    0 (17): a = [-2, 3; 2, 1]
                    1 (11): b = [11, 9]
                    2 (17): x = lusolve(a, b)
                ]
                seealso [Array] (6): [
                    0 (3): lup
                    1 (3): slu
                    2 (6): lsolve
                    3 (6): usolve
                    4 (6): matrix
                    5 (6): sparse
                ]
            }
            simplify [Object] (6): {
                name (8): simplify
                category (7): Algebra
                syntax [Array] (2): [
                    0 (14): simplify(expr)
                    1 (21): simplify(expr, rules)
                ]
                description (28): Simplify an expression tree.
                examples [Array] (5): [
                    0 (21): simplify("3 + 2 / 4")
                    1 (18): simplify("2x + x")
                    2 (28): f = parse("x * (x + 2 + x)")
                    3 (24): simplified = simplify(f)
                    4 (27): simplified.evaluate({x: 2})
                ]
                seealso [Array] (3): [
                    0 (10): derivative
                    1 (5): parse
                    2 (8): evaluate
                ]
            }
            rationalize [Object] (6): {
                name (11): rationalize
                category (7): Algebra
                syntax [Array] (3): [
                    0 (17): rationalize(expr)
                    1 (24): rationalize(expr, scope)
                    2 (34): rationalize(expr, scope, detailed)
                ]
                description (240): Transform a rationalizable expression in a rational fraction. If rational fraction is one variable polynomial then converts the numerator and denominator in canonical form, with decreasing exponents, returning the coefficients of numerator.
                examples [Array] (2): [
                    0 (29): rationalize("2x/y - y/(x+1)")
                    1 (35): rationalize("2x/y - y/(x+1)", true)
                ]
                seealso [Array] (1): [
                    0 (8): simplify
                ]
            }
            slu [Object] (6): {
                name (3): slu
                category (7): Algebra
                syntax [Array] (1): [
                    0 (24): slu(A, order, threshold)
                ]
                description (165): Calculate the Matrix LU decomposition with full pivoting. Matrix A is decomposed in two matrices (L, U) and two permutation vectors (pinv, q) where P * A * Q = L * U
                examples [Array] (1): [
                    0 (87): slu(sparse([4.5, 0, 3.2, 0; 3.1, 2.9, 0, 0.9; 0, 1.7, 3, 0; 3.5, 0.4, 0, 1]), 1, 0.001)
                ]
                seealso [Array] (7): [
                    0 (7): lusolve
                    1 (6): lsolve
                    2 (6): usolve
                    3 (6): matrix
                    4 (6): sparse
                    5 (3): lup
                    6 (2): qr
                ]
            }
            usolve [Object] (6): {
                name (6): usolve
                category (7): Algebra
                syntax [Array] (1): [
                    0 (14): x=usolve(U, b)
                ]
                description (110): Solves the linear system U * x = b where U is an [n x n] upper triangular matrix and b is a [n] column vector.
                examples [Array] (1): [
                    0 (80): x=usolve(sparse([1, 1, 1, 1; 0, 1, 1, 1; 0, 0, 1, 1; 0, 0, 0, 1]), [1; 2; 3; 4])
                ]
                seealso [Array] (5): [
                    0 (3): lup
                    1 (7): lusolve
                    2 (6): lsolve
                    3 (6): matrix
                    4 (6): sparse
                ]
            }
            qr [Object] (6): {
                name (2): qr
                category (7): Algebra
                syntax [Array] (1): [
                    0 (5): qr(A)
                ]
                description (164): Calculates the Matrix QR decomposition. Matrix `A` is decomposed in two matrices (`Q`, `R`) where `Q` is an orthogonal matrix and `R` is an upper triangular matrix.
                examples [Array] (1): [
                    0 (56): qr([[1, -1,  4], [1,  4, -2], [1,  4,  2], [1,  -1, 0]])
                ]
                seealso [Array] (3): [
                    0 (3): lup
                    1 (3): slu
                    2 (6): matrix
                ]
            }
            abs [Object] (6): {
                name (3): abs
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (6): abs(x)
                ]
                description (27): Compute the absolute value.
                examples [Array] (2): [
                    0 (8): abs(3.5)
                    1 (9): abs(-4.2)
                ]
                seealso [Array] (1): [
                    0 (4): sign
                ]
            }
            add [Object] (6): {
                name (3): add
                category (9): Operators
                syntax [Array] (2): [
                    0 (5): x + y
                    1 (9): add(x, y)
                ]
                description (15): Add two values.
                examples [Array] (5): [
                    0 (13): a = 2.1 + 3.6
                    1 (7): a - 3.6
                    2 (6): 3 + 2i
                    3 (13): 3 cm + 2 inch
                    4 (11): "2.3" + "4"
                ]
                seealso [Array] (1): [
                    0 (8): subtract
                ]
            }
            cbrt [Object] (6): {
                name (4): cbrt
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (7): cbrt(x)
                    1 (17): cbrt(x, allRoots)
                ]
                description (254): Compute the cubic root value. If x = y * y * y, then y is the cubic root of x. When `x` is a number or complex number, an optional second argument `allRoots` can be provided to return all three cubic roots. If not provided, the principal root is returned
                examples [Array] (7): [
                    0 (8): cbrt(64)
                    1 (7): cube(4)
                    2 (8): cbrt(-8)
                    3 (12): cbrt(2 + 3i)
                    4 (8): cbrt(8i)
                    5 (14): cbrt(8i, true)
                    6 (12): cbrt(27 m^3)
                ]
                seealso [Array] (4): [
                    0 (6): square
                    1 (4): sqrt
                    2 (4): cube
                    3 (8): multiply
                ]
            }
            ceil [Object] (6): {
                name (4): ceil
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (7): ceil(x)
                ]
                description (117): Round a value towards plus infinity. If x is complex, both real and imaginary part are rounded towards plus infinity.
                examples [Array] (3): [
                    0 (9): ceil(3.2)
                    1 (9): ceil(3.8)
                    2 (10): ceil(-4.2)
                ]
                seealso [Array] (3): [
                    0 (5): floor
                    1 (3): fix
                    2 (5): round
                ]
            }
            cube [Object] (6): {
                name (4): cube
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (7): cube(x)
                ]
                description (56): Compute the cube of a value. The cube of x is x * x * x.
                examples [Array] (3): [
                    0 (7): cube(2)
                    1 (3): 2^3
                    2 (9): 2 * 2 * 2
                ]
                seealso [Array] (3): [
                    0 (8): multiply
                    1 (6): square
                    2 (3): pow
                ]
            }
            divide [Object] (6): {
                name (6): divide
                category (9): Operators
                syntax [Array] (2): [
                    0 (5): x / y
                    1 (12): divide(x, y)
                ]
                description (18): Divide two values.
                examples [Array] (6): [
                    0 (9): a = 2 / 3
                    1 (5): a * 3
                    2 (7): 4.5 / 2
                    3 (9): 3 + 4 / 2
                    4 (11): (3 + 4) / 2
                    5 (11): 18 km / 4.5
                ]
                seealso [Array] (1): [
                    0 (8): multiply
                ]
            }
            dotDivide [Object] (6): {
                name (9): dotDivide
                category (9): Operators
                syntax [Array] (2): [
                    0 (6): x ./ y
                    1 (15): dotDivide(x, y)
                ]
                description (31): Divide two values element wise.
                examples [Array] (3): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (22): b = [2, 1, 1; 3, 2, 5]
                    2 (6): a ./ b
                ]
                seealso [Array] (3): [
                    0 (8): multiply
                    1 (11): dotMultiply
                    2 (6): divide
                ]
            }
            dotMultiply [Object] (6): {
                name (11): dotMultiply
                category (9): Operators
                syntax [Array] (2): [
                    0 (6): x .* y
                    1 (17): dotMultiply(x, y)
                ]
                description (33): Multiply two values element wise.
                examples [Array] (3): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (22): b = [2, 1, 1; 3, 2, 5]
                    2 (6): a .* b
                ]
                seealso [Array] (3): [
                    0 (8): multiply
                    1 (6): divide
                    2 (9): dotDivide
                ]
            }
            dotPow [Object] (6): {
                name (6): dotPow
                category (9): Operators
                syntax [Array] (2): [
                    0 (6): x .^ y
                    1 (12): dotPow(x, y)
                ]
                description (44): Calculates the power of x to y element wise.
                examples [Array] (2): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (6): a .^ 2
                ]
                seealso [Array] (1): [
                    0 (3): pow
                ]
            }
            exp [Object] (6): {
                name (3): exp
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (6): exp(x)
                ]
                description (34): Calculate the exponent of a value.
                examples [Array] (5): [
                    0 (8): exp(1.3)
                    1 (7): e ^ 1.3
                    2 (13): log(exp(1.3))
                    3 (7): x = 2.4
                    4 (51): (exp(i*x) == cos(x) + i*sin(x))   # Euler's formula
                ]
                seealso [Array] (4): [
                    0 (4): expm
                    1 (5): expm1
                    2 (3): pow
                    3 (3): log
                ]
            }
            expm [Object] (6): {
                name (4): expm
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (6): exp(x)
                ]
                description (149): Compute the matrix exponential, expm(A) = e^A. The matrix must be square. Not to be confused with exp(a), which performs element-wise exponentiation.
                examples [Array] (1): [
                    0 (19): expm([[0,2],[0,0]])
                ]
                seealso [Array] (1): [
                    0 (3): exp
                ]
            }
            expm1 [Object] (6): {
                name (5): expm1
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (8): expm1(x)
                ]
                description (64): Calculate the value of subtracting 1 from the exponential value.
                examples [Array] (3): [
                    0 (8): expm1(2)
                    1 (13): pow(e, 2) - 1
                    2 (17): log(expm1(2) + 1)
                ]
                seealso [Array] (3): [
                    0 (3): exp
                    1 (3): pow
                    2 (3): log
                ]
            }
            fix [Object] (6): {
                name (3): fix
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (6): fix(x)
                ]
                description (99): Round a value towards zero. If x is complex, both real and imaginary part are rounded towards zero.
                examples [Array] (4): [
                    0 (8): fix(3.2)
                    1 (8): fix(3.8)
                    2 (9): fix(-4.2)
                    3 (9): fix(-4.8)
                ]
                seealso [Array] (3): [
                    0 (4): ceil
                    1 (5): floor
                    2 (5): round
                ]
            }
            floor [Object] (6): {
                name (5): floor
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (8): floor(x)
                ]
                description (118): Round a value towards minus infinity.If x is complex, both real and imaginary part are rounded towards minus infinity.
                examples [Array] (3): [
                    0 (10): floor(3.2)
                    1 (10): floor(3.8)
                    2 (11): floor(-4.2)
                ]
                seealso [Array] (3): [
                    0 (4): ceil
                    1 (3): fix
                    2 (5): round
                ]
            }
            gcd [Object] (6): {
                name (3): gcd
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (9): gcd(a, b)
                    1 (17): gcd(a, b, c, ...)
                ]
                description (36): Compute the greatest common divisor.
                examples [Array] (3): [
                    0 (10): gcd(8, 12)
                    1 (10): gcd(-4, 6)
                    2 (16): gcd(25, 15, -10)
                ]
                seealso [Array] (2): [
                    0 (3): lcm
                    1 (4): xgcd
                ]
            }
            hypot [Object] (6): {
                name (5): hypot
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (19): hypot(a, b, c, ...)
                    1 (21): hypot([a, b, c, ...])
                ]
                description (48): Calculate the hypotenusa of a list with values. 
                examples [Array] (4): [
                    0 (11): hypot(3, 4)
                    1 (15): sqrt(3^2 + 4^2)
                    2 (9): hypot(-2)
                    3 (16): hypot([3, 4, 5])
                ]
                seealso [Array] (2): [
                    0 (3): abs
                    1 (4): norm
                ]
            }
            lcm [Object] (6): {
                name (3): lcm
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (9): lcm(x, y)
                ]
                description (34): Compute the least common multiple.
                examples [Array] (3): [
                    0 (9): lcm(4, 6)
                    1 (10): lcm(6, 21)
                    2 (13): lcm(6, 21, 5)
                ]
                seealso [Array] (1): [
                    0 (3): gcd
                ]
            }
            log [Object] (6): {
                name (3): log
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (6): log(x)
                    1 (12): log(x, base)
                ]
                description (219): Compute the logarithm of a value. If no base is provided, the natural logarithm of x is calculated. If base if provided, the logarithm is calculated for the specified base. log(x, base) is defined as log(x) / log(base).
                examples [Array] (8): [
                    0 (8): log(3.5)
                    1 (12): a = log(2.4)
                    2 (6): exp(a)
                    3 (6): 10 ^ 4
                    4 (14): log(10000, 10)
                    5 (20): log(10000) / log(10)
                    6 (16): b = log(1024, 2)
                    7 (5): 2 ^ b
                ]
                seealso [Array] (4): [
                    0 (3): exp
                    1 (5): log1p
                    2 (4): log2
                    3 (5): log10
                ]
            }
            log2 [Object] (6): {
                name (4): log2
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (7): log2(x)
                ]
                description (77): Calculate the 2-base of a value. This is the same as calculating `log(x, 2)`.
                examples [Array] (4): [
                    0 (13): log2(0.03125)
                    1 (8): log2(16)
                    2 (18): log2(16) / log2(2)
                    3 (9): pow(2, 4)
                ]
                seealso [Array] (4): [
                    0 (3): exp
                    1 (5): log1p
                    2 (3): log
                    3 (5): log10
                ]
            }
            log1p [Object] (6): {
                name (5): log1p
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (8): log1p(x)
                    1 (14): log1p(x, base)
                ]
                description (38): Calculate the logarithm of a `value+1`
                examples [Array] (5): [
                    0 (10): log1p(2.5)
                    1 (15): exp(log1p(1.4))
                    2 (10): pow(10, 4)
                    3 (15): log1p(9999, 10)
                    4 (21): log1p(9999) / log(10)
                ]
                seealso [Array] (4): [
                    0 (3): exp
                    1 (3): log
                    2 (4): log2
                    3 (5): log10
                ]
            }
            log10 [Object] (6): {
                name (5): log10
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (8): log10(x)
                ]
                description (41): Compute the 10-base logarithm of a value.
                examples [Array] (5): [
                    0 (14): log10(0.00001)
                    1 (12): log10(10000)
                    2 (6): 10 ^ 4
                    3 (20): log(10000) / log(10)
                    4 (14): log(10000, 10)
                ]
                seealso [Array] (2): [
                    0 (3): exp
                    1 (3): log
                ]
            }
            mod [Object] (6): {
                name (3): mod
                category (9): Operators
                syntax [Array] (3): [
                    0 (5): x % y
                    1 (7): x mod y
                    2 (9): mod(x, y)
                ]
                description (61): Calculates the modulus, the remainder of an integer division.
                examples [Array] (6): [
                    0 (5): 7 % 3
                    1 (6): 11 % 2
                    2 (8): 10 mod 4
                    3 (16): isOdd(x) = x % 2
                    4 (8): isOdd(2)
                    5 (8): isOdd(3)
                ]
                seealso [Array] (1): [
                    0 (6): divide
                ]
            }
            multiply [Object] (6): {
                name (8): multiply
                category (9): Operators
                syntax [Array] (2): [
                    0 (5): x * y
                    1 (14): multiply(x, y)
                ]
                description (20): multiply two values.
                examples [Array] (5): [
                    0 (13): a = 2.1 * 3.4
                    1 (7): a / 3.4
                    2 (9): 2 * 3 + 4
                    3 (11): 2 * (3 + 4)
                    4 (10): 3 * 2.1 km
                ]
                seealso [Array] (1): [
                    0 (6): divide
                ]
            }
            norm [Object] (5): {
                name (4): norm
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (7): norm(x)
                    1 (10): norm(x, p)
                ]
                description (49): Calculate the norm of a number, vector or matrix.
                examples [Array] (9): [
                    0 (9): abs(-3.5)
                    1 (10): norm(-3.5)
                    2 (12): norm(3 - 4i)
                    3 (26): norm([1, 2, -3], Infinity)
                    4 (27): norm([1, 2, -3], -Infinity)
                    5 (15): norm([3, 4], 2)
                    6 (25): norm([[1, 2], [3, 4]], 1)
                    7 (29): norm([[1, 2], [3, 4]], "inf")
                    8 (29): norm([[1, 2], [3, 4]], "fro")
                ]
            }
            nthRoot [Object] (6): {
                name (7): nthRoot
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (10): nthRoot(a)
                    1 (16): nthRoot(a, root)
                ]
                description (146): Calculate the nth root of a value. The principal nth root of a positive real number A, is the positive real solution of the equation "x^root = A".
                examples [Array] (4): [
                    0 (5): 4 ^ 3
                    1 (14): nthRoot(64, 3)
                    2 (13): nthRoot(9, 2)
                    3 (7): sqrt(9)
                ]
                seealso [Array] (3): [
                    0 (8): nthRoots
                    1 (3): pow
                    2 (4): sqrt
                ]
            }
            nthRoots [Object] (6): {
                name (8): nthRoots
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (11): nthRoots(A)
                    1 (17): nthRoots(A, root)
                ]
                description (184): Calculate the nth roots of a value. An nth root of a positive real number A, is a positive real solution of the equation "x^root = A". This function returns an array of complex values.
                examples [Array] (2): [
                    0 (11): nthRoots(1)
                    1 (14): nthRoots(1, 3)
                ]
                seealso [Array] (3): [
                    0 (4): sqrt
                    1 (3): pow
                    2 (7): nthRoot
                ]
            }
            pow [Object] (6): {
                name (3): pow
                category (9): Operators
                syntax [Array] (2): [
                    0 (5): x ^ y
                    1 (9): pow(x, y)
                ]
                description (36): Calculates the power of x to y, x^y.
                examples [Array] (3): [
                    0 (3): 2^3
                    1 (5): 2*2*2
                    2 (16): 1 + e ^ (pi * i)
                ]
                seealso [Array] (4): [
                    0 (8): multiply
                    1 (7): nthRoot
                    2 (8): nthRoots
                    3 (4): sqrt
                ]
            }
            round [Object] (6): {
                name (5): round
                category (10): Arithmetic
                syntax [Array] (2): [
                    0 (8): round(x)
                    1 (11): round(x, n)
                ]
                description (185): round a value towards the nearest integer.If x is complex, both real and imaginary part are rounded towards the nearest integer. When n is specified, the value is rounded to n decimals.
                examples [Array] (6): [
                    0 (10): round(3.2)
                    1 (10): round(3.8)
                    2 (11): round(-4.2)
                    3 (11): round(-4.8)
                    4 (12): round(pi, 3)
                    5 (19): round(123.45678, 2)
                ]
                seealso [Array] (3): [
                    0 (4): ceil
                    1 (5): floor
                    2 (3): fix
                ]
            }
            sign [Object] (6): {
                name (4): sign
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (7): sign(x)
                ]
                description (94): Compute the sign of a value. The sign of a value x is 1 when x>1, -1 when x<0, and 0 when x=0.
                examples [Array] (3): [
                    0 (9): sign(3.5)
                    1 (10): sign(-4.2)
                    2 (7): sign(0)
                ]
                seealso [Array] (1): [
                    0 (3): abs
                ]
            }
            sqrt [Object] (6): {
                name (4): sqrt
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (7): sqrt(x)
                ]
                description (76): Compute the square root value. If x = y * y, then y is the square root of x.
                examples [Array] (3): [
                    0 (8): sqrt(25)
                    1 (5): 5 * 5
                    2 (8): sqrt(-1)
                ]
                seealso [Array] (6): [
                    0 (6): square
                    1 (5): sqrtm
                    2 (8): multiply
                    3 (7): nthRoot
                    4 (8): nthRoots
                    5 (3): pow
                ]
            }
            sqrtm [Object] (6): {
                name (5): sqrtm
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (8): sqrtm(x)
                ]
                description (140): Calculate the principal square root of a square matrix. The principal square root matrix `X` of another matrix `A` is such that `X * X = A`.
                examples [Array] (1): [
                    0 (23): sqrtm([[1, 2], [3, 4]])
                ]
                seealso [Array] (4): [
                    0 (4): sqrt
                    1 (3): abs
                    2 (6): square
                    3 (8): multiply
                ]
            }
            square [Object] (6): {
                name (6): square
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (9): square(x)
                ]
                description (56): Compute the square of a value. The square of x is x * x.
                examples [Array] (4): [
                    0 (9): square(3)
                    1 (7): sqrt(9)
                    2 (3): 3^2
                    3 (5): 3 * 3
                ]
                seealso [Array] (4): [
                    0 (8): multiply
                    1 (3): pow
                    2 (4): sqrt
                    3 (4): cube
                ]
            }
            subtract [Object] (6): {
                name (8): subtract
                category (9): Operators
                syntax [Array] (2): [
                    0 (5): x - y
                    1 (14): subtract(x, y)
                ]
                description (20): subtract two values.
                examples [Array] (5): [
                    0 (11): a = 5.3 - 2
                    1 (5): a + 2
                    2 (9): 2/3 - 1/6
                    3 (9): 2 * 3 - 3
                    4 (13): 2.1 km - 500m
                ]
                seealso [Array] (1): [
                    0 (3): add
                ]
            }
            unaryMinus [Object] (6): {
                name (10): unaryMinus
                category (9): Operators
                syntax [Array] (2): [
                    0 (2): -x
                    1 (13): unaryMinus(x)
                ]
                description (70): Inverse the sign of a value. Converts booleans and strings to numbers.
                examples [Array] (3): [
                    0 (4): -4.5
                    1 (7): -(-5.6)
                    2 (5): -"22"
                ]
                seealso [Array] (3): [
                    0 (3): add
                    1 (8): subtract
                    2 (9): unaryPlus
                ]
            }
            unaryPlus [Object] (6): {
                name (9): unaryPlus
                category (9): Operators
                syntax [Array] (2): [
                    0 (2): +x
                    1 (12): unaryPlus(x)
                ]
                description (41): Converts booleans and strings to numbers.
                examples [Array] (2): [
                    0 (5): +true
                    1 (4): +"2"
                ]
                seealso [Array] (3): [
                    0 (3): add
                    1 (8): subtract
                    2 (10): unaryMinus
                ]
            }
            xgcd [Object] (6): {
                name (4): xgcd
                category (10): Arithmetic
                syntax [Array] (1): [
                    0 (10): xgcd(a, b)
                ]
                description (174): Calculate the extended greatest common divisor for two values. The result is an array [d, x, y] with 3 entries, where d is the greatest common divisor, and d = x * a + y * b.
                examples [Array] (3): [
                    0 (11): xgcd(8, 12)
                    1 (10): gcd(8, 12)
                    2 (18): xgcd(36163, 21199)
                ]
                seealso [Array] (2): [
                    0 (3): gcd
                    1 (3): lcm
                ]
            }
            bitAnd [Object] (6): {
                name (6): bitAnd
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (5): x & y
                    1 (12): bitAnd(x, y)
                ]
                description (266): Bitwise AND operation. Performs the logical AND operation on each pair of the corresponding bits of the two given values by multiplying them. If both bits in the compared position are 1, the bit in the resulting binary representation is 1, otherwise, the result is 0
                examples [Array] (3): [
                    0 (5): 5 & 3
                    1 (15): bitAnd(53, 131)
                    2 (16): [1, 12, 31] & 42
                ]
                seealso [Array] (6): [
                    0 (6): bitNot
                    1 (5): bitOr
                    2 (6): bitXor
                    3 (9): leftShift
                    4 (15): rightArithShift
                    5 (13): rightLogShift
                ]
            }
            bitNot [Object] (6): {
                name (6): bitNot
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (2): ~x
                    1 (9): bitNot(x)
                ]
                description (139): Bitwise NOT operation. Performs a logical negation on each bit of the given value. Bits that are 0 become 1, and those that are 1 become 0.
                examples [Array] (3): [
                    0 (2): ~1
                    1 (2): ~2
                    2 (18): bitNot([2, -3, 4])
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (5): bitOr
                    2 (6): bitXor
                    3 (9): leftShift
                    4 (15): rightArithShift
                    5 (13): rightLogShift
                ]
            }
            bitOr [Object] (6): {
                name (5): bitOr
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (5): x | y
                    1 (11): bitOr(x, y)
                ]
                description (251): Bitwise OR operation. Performs the logical inclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if the first bit is 1 or the second bit is 1 or both bits are 1, otherwise, the result is 0.
                examples [Array] (2): [
                    0 (5): 5 | 3
                    1 (19): bitOr([1, 2, 3], 4)
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (6): bitNot
                    2 (6): bitXor
                    3 (9): leftShift
                    4 (15): rightArithShift
                    5 (13): rightLogShift
                ]
            }
            bitXor [Object] (6): {
                name (6): bitXor
                category (7): Bitwise
                syntax [Array] (1): [
                    0 (12): bitXor(x, y)
                ]
                description (272): Bitwise XOR operation, exclusive OR. Performs the logical exclusive OR operation on each pair of corresponding bits of the two given values. The result in each position is 1 if only the first bit is 1 or only the second bit is 1, but will be 0 if both are 0 or both are 1.
                examples [Array] (2): [
                    0 (11): bitOr(1, 2)
                    1 (20): bitXor([2, 3, 4], 4)
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (6): bitNot
                    2 (5): bitOr
                    3 (9): leftShift
                    4 (15): rightArithShift
                    5 (13): rightLogShift
                ]
            }
            leftShift [Object] (6): {
                name (9): leftShift
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (6): x << y
                    1 (15): leftShift(x, y)
                ]
                description (60): Bitwise left logical shift of a value x by y number of bits.
                examples [Array] (2): [
                    0 (6): 4 << 1
                    1 (6): 8 >> 1
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (6): bitNot
                    2 (5): bitOr
                    3 (6): bitXor
                    4 (15): rightArithShift
                    5 (13): rightLogShift
                ]
            }
            rightArithShift [Object] (6): {
                name (15): rightArithShift
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (6): x >> y
                    1 (21): rightArithShift(x, y)
                ]
                description (64): Bitwise right arithmetic shift of a value x by y number of bits.
                examples [Array] (3): [
                    0 (6): 8 >> 1
                    1 (6): 4 << 1
                    2 (8): -12 >> 2
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (6): bitNot
                    2 (5): bitOr
                    3 (6): bitXor
                    4 (9): leftShift
                    5 (13): rightLogShift
                ]
            }
            rightLogShift [Object] (6): {
                name (13): rightLogShift
                category (7): Bitwise
                syntax [Array] (2): [
                    0 (7): x >>> y
                    1 (19): rightLogShift(x, y)
                ]
                description (61): Bitwise right logical shift of a value x by y number of bits.
                examples [Array] (3): [
                    0 (7): 8 >>> 1
                    1 (6): 4 << 1
                    2 (9): -12 >>> 2
                ]
                seealso [Array] (6): [
                    0 (6): bitAnd
                    1 (6): bitNot
                    2 (5): bitOr
                    3 (6): bitXor
                    4 (9): leftShift
                    5 (15): rightArithShift
                ]
            }
            bellNumbers [Object] (6): {
                name (11): bellNumbers
                category (13): Combinatorics
                syntax [Array] (1): [
                    0 (14): bellNumbers(n)
                ]
                description (216): The Bell Numbers count the number of partitions of a set. A partition is a pairwise disjoint subset of S whose union is S. `bellNumbers` only takes integer arguments. The following condition must be enforced: n >= 0.
                examples [Array] (2): [
                    0 (14): bellNumbers(3)
                    1 (14): bellNumbers(8)
                ]
                seealso [Array] (1): [
                    0 (10): stirlingS2
                ]
            }
            catalan [Object] (6): {
                name (7): catalan
                category (13): Combinatorics
                syntax [Array] (1): [
                    0 (10): catalan(n)
                ]
                description (167): The Catalan Numbers enumerate combinatorial structures of many different types. catalan only takes integer arguments. The following condition must be enforced: n >= 0.
                examples [Array] (2): [
                    0 (10): catalan(3)
                    1 (10): catalan(8)
                ]
                seealso [Array] (1): [
                    0 (11): bellNumbers
                ]
            }
            composition [Object] (6): {
                name (11): composition
                category (13): Combinatorics
                syntax [Array] (1): [
                    0 (17): composition(n, k)
                ]
                description (133): The composition counts of n into k parts. composition only takes integer arguments. The following condition must be enforced: k <= n.
                examples [Array] (1): [
                    0 (17): composition(5, 3)
                ]
                seealso [Array] (1): [
                    0 (12): combinations
                ]
            }
            stirlingS2 [Object] (6): {
                name (10): stirlingS2
                category (13): Combinatorics
                syntax [Array] (1): [
                    0 (16): stirlingS2(n, k)
                ]
                description (271): he Stirling numbers of the second kind, counts the number of ways to partition a set of n labelled objects into k nonempty unlabelled subsets. `stirlingS2` only takes integer arguments. The following condition must be enforced: k <= n. If n = k or k = 1, then s(n,k) = 1.
                examples [Array] (1): [
                    0 (16): stirlingS2(5, 3)
                ]
                seealso [Array] (1): [
                    0 (11): bellNumbers
                ]
            }
            config [Object] (6): {
                name (6): config
                category (4): Core
                syntax [Array] (2): [
                    0 (8): config()
                    1 (15): config(options)
                ]
                description (42): Get configuration or change configuration.
                examples [Array] (4): [
                    0 (8): config()
                    1 (9): 1/3 + 1/4
                    2 (28): config({number: "Fraction"})
                    3 (9): 1/3 + 1/4
                ]
                seealso [Array] (0): []
            }
            import [Object] (6): {
                name (6): import
                category (4): Core
                syntax [Array] (2): [
                    0 (17): import(functions)
                    1 (26): import(functions, options)
                ]
                description (45): Import functions or constants from an object.
                examples [Array] (3): [
                    0 (41): import({myFn: f(x)=x^2, myConstant: 32 })
                    1 (7): myFn(2)
                    2 (10): myConstant
                ]
                seealso [Array] (0): []
            }
            typed [Object] (6): {
                name (5): typed
                category (4): Core
                syntax [Array] (2): [
                    0 (17): typed(signatures)
                    1 (23): typed(name, signatures)
                ]
                description (24): Create a typed function.
                examples [Array] (3): [
                    0 (46): double = typed({ "number, number": f(x)=x+x })
                    1 (9): double(2)
                    2 (15): double("hello")
                ]
                seealso [Array] (0): []
            }
            arg [Object] (6): {
                name (3): arg
                category (7): Complex
                syntax [Array] (1): [
                    0 (6): arg(x)
                ]
                description (94): Compute the argument of a complex value. If x = a+bi, the argument is computed as atan2(b, a).
                examples [Array] (3): [
                    0 (11): arg(2 + 2i)
                    1 (11): atan2(3, 2)
                    2 (11): arg(2 + 3i)
                ]
                seealso [Array] (4): [
                    0 (2): re
                    1 (2): im
                    2 (4): conj
                    3 (3): abs
                ]
            }
            conj [Object] (6): {
                name (4): conj
                category (7): Complex
                syntax [Array] (1): [
                    0 (7): conj(x)
                ]
                description (93): Compute the complex conjugate of a complex value. If x = a+bi, the complex conjugate is a-bi.
                examples [Array] (3): [
                    0 (12): conj(2 + 3i)
                    1 (12): conj(2 - 3i)
                    2 (11): conj(-5.2i)
                ]
                seealso [Array] (4): [
                    0 (2): re
                    1 (2): im
                    2 (3): abs
                    3 (3): arg
                ]
            }
            re [Object] (6): {
                name (2): re
                category (7): Complex
                syntax [Array] (1): [
                    0 (5): re(x)
                ]
                description (38): Get the real part of a complex number.
                examples [Array] (4): [
                    0 (10): re(2 + 3i)
                    1 (10): im(2 + 3i)
                    2 (9): re(-5.2i)
                    3 (7): re(2.4)
                ]
                seealso [Array] (4): [
                    0 (2): im
                    1 (4): conj
                    2 (3): abs
                    3 (3): arg
                ]
            }
            im [Object] (6): {
                name (2): im
                category (7): Complex
                syntax [Array] (1): [
                    0 (5): im(x)
                ]
                description (43): Get the imaginary part of a complex number.
                examples [Array] (4): [
                    0 (10): im(2 + 3i)
                    1 (10): re(2 + 3i)
                    2 (9): im(-5.2i)
                    3 (7): im(2.4)
                ]
                seealso [Array] (4): [
                    0 (2): re
                    1 (4): conj
                    2 (3): abs
                    3 (3): arg
                ]
            }
            evaluate [Object] (6): {
                name (8): evaluate
                category (10): Expression
                syntax [Array] (2): [
                    0 (20): evaluate(expression)
                    1 (36): evaluate([expr1, expr2, expr3, ...])
                ]
                description (52): Evaluate an expression or an array with expressions.
                examples [Array] (2): [
                    0 (17): evaluate("2 + 3")
                    1 (27): evaluate("sqrt(" + 4 + ")")
                ]
                seealso [Array] (0): []
            }
            help [Object] (6): {
                name (4): help
                category (10): Expression
                syntax [Array] (2): [
                    0 (12): help(object)
                    1 (12): help(string)
                ]
                description (49): Display documentation on a function or data type.
                examples [Array] (2): [
                    0 (10): help(sqrt)
                    1 (15): help("complex")
                ]
                seealso [Array] (0): []
            }
            distance [Object] (6): {
                name (8): distance
                category (8): Geometry
                syntax [Array] (2): [
                    0 (28): distance([x1, y1], [x2, y2])
                    1 (30): distance([[x1, y1], [x2, y2]])
                ]
                description (53): Calculates the Euclidean distance between two points.
                examples [Array] (2): [
                    0 (22): distance([0,0], [4,4])
                    1 (24): distance([[0,0], [4,4]])
                ]
                seealso [Array] (0): []
            }
            intersect [Object] (6): {
                name (9): intersect
                category (8): Geometry
                syntax [Array] (2): [
                    0 (37): intersect(expr1, expr2, expr3, expr4)
                    1 (30): intersect(expr1, expr2, expr3)
                ]
                description (55): Computes the intersection point of lines and/or planes.
                examples [Array] (2): [
                    0 (45): intersect([0, 0], [10, 10], [10, 0], [0, 10])
                    1 (47): intersect([1, 0, 1],  [4, -2, 2], [1, 1, 1, 6])
                ]
                seealso [Array] (0): []
            }
            and [Object] (6): {
                name (3): and
                category (7): Logical
                syntax [Array] (2): [
                    0 (7): x and y
                    1 (9): and(x, y)
                ]
                description (84): Logical and. Test whether two values are both defined with a nonzero/nonempty value.
                examples [Array] (3): [
                    0 (14): true and false
                    1 (13): true and true
                    2 (7): 2 and 4
                ]
                seealso [Array] (3): [
                    0 (3): not
                    1 (2): or
                    2 (3): xor
                ]
            }
            not [Object] (6): {
                name (3): not
                category (7): Logical
                syntax [Array] (2): [
                    0 (5): not x
                    1 (6): not(x)
                ]
                description (55): Logical not. Flips the boolean value of given argument.
                examples [Array] (4): [
                    0 (8): not true
                    1 (9): not false
                    2 (5): not 2
                    3 (5): not 0
                ]
                seealso [Array] (3): [
                    0 (3): and
                    1 (2): or
                    2 (3): xor
                ]
            }
            or [Object] (6): {
                name (2): or
                category (7): Logical
                syntax [Array] (2): [
                    0 (6): x or y
                    1 (8): or(x, y)
                ]
                description (80): Logical or. Test if at least one value is defined with a nonzero/nonempty value.
                examples [Array] (3): [
                    0 (13): true or false
                    1 (14): false or false
                    2 (6): 0 or 4
                ]
                seealso [Array] (3): [
                    0 (3): not
                    1 (3): and
                    2 (3): xor
                ]
            }
            xor [Object] (6): {
                name (3): xor
                category (7): Logical
                syntax [Array] (2): [
                    0 (7): x xor y
                    1 (9): xor(x, y)
                ]
                description (104): Logical exclusive or, xor. Test whether one and only one value is defined with a nonzero/nonempty value.
                examples [Array] (4): [
                    0 (14): true xor false
                    1 (15): false xor false
                    2 (13): true xor true
                    3 (7): 0 xor 4
                ]
                seealso [Array] (3): [
                    0 (3): not
                    1 (3): and
                    2 (2): or
                ]
            }
            concat [Object] (6): {
                name (6): concat
                category (6): Matrix
                syntax [Array] (2): [
                    0 (20): concat(A, B, C, ...)
                    1 (25): concat(A, B, C, ..., dim)
                ]
                description (158): Concatenate matrices. By default, the matrices are concatenated by the last dimension. The dimension on which to concatenate can be provided as last argument.
                examples [Array] (5): [
                    0 (16): A = [1, 2; 5, 6]
                    1 (16): B = [3, 4; 7, 8]
                    2 (12): concat(A, B)
                    3 (15): concat(A, B, 1)
                    4 (15): concat(A, B, 2)
                ]
                seealso [Array] (12): [
                    0 (3): det
                    1 (4): diag
                    2 (8): identity
                    3 (3): inv
                    4 (4): ones
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            cross [Object] (6): {
                name (5): cross
                category (6): Matrix
                syntax [Array] (1): [
                    0 (11): cross(A, B)
                ]
                description (71): Calculate the cross product for two vectors in three dimensional space.
                examples [Array] (3): [
                    0 (28): cross([1, 1, 0],  [0, 1, 1])
                    1 (28): cross([3, -3, 1], [4, 9, 2])
                    2 (28): cross([2, 3, 4],  [5, 6, 7])
                ]
                seealso [Array] (2): [
                    0 (8): multiply
                    1 (3): dot
                ]
            }
            column [Object] (6): {
                name (6): column
                category (6): Matrix
                syntax [Array] (1): [
                    0 (16): column(x, index)
                ]
                description (39): Return a column from a matrix or array.
                examples [Array] (3): [
                    0 (20): A = [[1, 2], [3, 4]]
                    1 (12): column(A, 1)
                    2 (12): column(A, 2)
                ]
                seealso [Array] (1): [
                    0 (3): row
                ]
            }
            ctranspose [Object] (6): {
                name (10): ctranspose
                category (6): Matrix
                syntax [Array] (2): [
                    0 (2): x'
                    1 (13): ctranspose(x)
                ]
                description (40): Complex Conjugate and Transpose a matrix
                examples [Array] (3): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (2): a'
                    2 (13): ctranspose(a)
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (7): squeeze
                    9 (6): subset
                    10 (5): trace
                    11 (5): zeros
                ]
            }
            det [Object] (6): {
                name (3): det
                category (6): Matrix
                syntax [Array] (1): [
                    0 (6): det(x)
                ]
                description (37): Calculate the determinant of a matrix
                examples [Array] (2): [
                    0 (17): det([1, 2; 3, 4])
                    1 (35): det([-2, 2, 3; -1, 1, 3; 2, 0, -1])
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (4): diag
                    2 (8): identity
                    3 (3): inv
                    4 (4): ones
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            diag [Object] (6): {
                name (4): diag
                category (6): Matrix
                syntax [Array] (2): [
                    0 (7): diag(x)
                    1 (10): diag(x, k)
                ]
                description (425): Create a diagonal matrix or retrieve the diagonal of a matrix. When x is a vector, a matrix with the vector values on the diagonal will be returned. When x is a matrix, a vector with the diagonal values of the matrix is returned. When k is provided, the k-th diagonal will be filled in or retrieved, if k is positive, the values are placed on the super diagonal. When k is negative, the values are placed on the sub diagonal.
                examples [Array] (4): [
                    0 (9): diag(1:3)
                    1 (12): diag(1:3, 1)
                    2 (31): a = [1, 2, 3; 4, 5, 6; 7, 8, 9]
                    3 (7): diag(a)
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (8): identity
                    3 (3): inv
                    4 (4): ones
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            dot [Object] (6): {
                name (3): dot
                category (6): Matrix
                syntax [Array] (2): [
                    0 (9): dot(A, B)
                    1 (5): A * B
                ]
                description (186): Calculate the dot product of two vectors. The dot product of A = [a1, a2, a3, ..., an] and B = [b1, b2, b3, ..., bn] is defined as dot(A, B) = a1 * b1 + a2 * b2 + a3 * b3 + ... + an * bn
                examples [Array] (2): [
                    0 (25): dot([2, 4, 1], [2, 2, 3])
                    1 (21): [2, 4, 1] * [2, 2, 3]
                ]
                seealso [Array] (2): [
                    0 (8): multiply
                    1 (5): cross
                ]
            }
            getMatrixDataType [Object] (6): {
                name (17): getMatrixDataType
                category (6): Matrix
                syntax [Array] (1): [
                    0 (20): getMatrixDataType(x)
                ]
                description (222): Find the data type of all elements in a matrix or array, for example "number" if all items are a number and "Complex" if all values are complex numbers. If a matrix contains more than one data type, it will return "mixed".
                examples [Array] (4): [
                    0 (28): getMatrixDataType([1, 2, 3])
                    1 (37): getMatrixDataType([[5 cm], [2 inch]])
                    2 (30): getMatrixDataType([1, "text"])
                    3 (36): getMatrixDataType([1, bignumber(4)])
                ]
                seealso [Array] (3): [
                    0 (6): matrix
                    1 (6): sparse
                    2 (6): typeOf
                ]
            }
            identity [Object] (6): {
                name (8): identity
                category (6): Matrix
                syntax [Array] (3): [
                    0 (11): identity(n)
                    1 (14): identity(m, n)
                    2 (16): identity([m, n])
                ]
                description (102): Returns the identity matrix with size m-by-n. The matrix has ones on the diagonal and zeros elsewhere.
                examples [Array] (4): [
                    0 (11): identity(3)
                    1 (14): identity(3, 5)
                    2 (22): a = [1, 2, 3; 4, 5, 6]
                    3 (17): identity(size(a))
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (3): inv
                    4 (4): ones
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            filter [Object] (6): {
                name (6): filter
                category (6): Matrix
                syntax [Array] (1): [
                    0 (15): filter(x, test)
                ]
                description (25): Filter items in a matrix.
                examples [Array] (3): [
                    0 (21): isPositive(x) = x > 0
                    1 (37): filter([6, -2, -1, 4, 3], isPositive)
                    2 (32): filter([6, -2, 0, 1, 0], x != 0)
                ]
                seealso [Array] (3): [
                    0 (4): sort
                    1 (3): map
                    2 (7): forEach
                ]
            }
            flatten [Object] (6): {
                name (7): flatten
                category (6): Matrix
                syntax [Array] (1): [
                    0 (10): flatten(x)
                ]
                description (68): Flatten a multi dimensional matrix into a single dimensional matrix.
                examples [Array] (4): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (7): size(a)
                    2 (14): b = flatten(a)
                    3 (7): size(b)
                ]
                seealso [Array] (4): [
                    0 (6): concat
                    1 (6): resize
                    2 (4): size
                    3 (7): squeeze
                ]
            }
            forEach [Object] (6): {
                name (7): forEach
                category (6): Matrix
                syntax [Array] (1): [
                    0 (20): forEach(x, callback)
                ]
                description (87): Iterates over all elements of a matrix/array, and executes the given callback function.
                examples [Array] (1): [
                    0 (54): forEach([1, 2, 3], function(val) { console.log(val) })
                ]
                seealso [Array] (3): [
                    0 (3): map
                    1 (4): sort
                    2 (6): filter
                ]
            }
            inv [Object] (6): {
                name (3): inv
                category (6): Matrix
                syntax [Array] (1): [
                    0 (6): inv(x)
                ]
                description (33): Calculate the inverse of a matrix
                examples [Array] (3): [
                    0 (17): inv([1, 2; 3, 4])
                    1 (6): inv(4)
                    2 (5): 1 / 4
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (4): ones
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            eigs [Object] (6): {
                name (4): eigs
                category (6): Matrix
                syntax [Array] (1): [
                    0 (7): eigs(x)
                ]
                description (69): Calculate the eigenvalues and eigenvectors of a real symmetric matrix
                examples [Array] (1): [
                    0 (26): eigs([[5, 2.3], [2.3, 1]])
                ]
                seealso [Array] (1): [
                    0 (3): inv
                ]
            }
            kron [Object] (6): {
                name (4): kron
                category (6): Matrix
                syntax [Array] (1): [
                    0 (10): kron(x, y)
                ]
                description (58): Calculates the kronecker product of 2 matrices or vectors.
                examples [Array] (2): [
                    0 (40): kron([[1, 0], [0, 1]], [[1, 2], [3, 4]])
                    1 (20): kron([1,1], [2,3,4])
                ]
                seealso [Array] (3): [
                    0 (8): multiply
                    1 (3): dot
                    2 (5): cross
                ]
            }
            map [Object] (6): {
                name (3): map
                category (6): Matrix
                syntax [Array] (1): [
                    0 (16): map(x, callback)
                ]
                description (114): Create a new matrix or array with the results of the callback function executed on each entry of the matrix/array.
                examples [Array] (1): [
                    0 (22): map([1, 2, 3], square)
                ]
                seealso [Array] (2): [
                    0 (6): filter
                    1 (7): forEach
                ]
            }
            ones [Object] (6): {
                name (4): ones
                category (6): Matrix
                syntax [Array] (6): [
                    0 (7): ones(m)
                    1 (10): ones(m, n)
                    2 (18): ones(m, n, p, ...)
                    3 (9): ones([m])
                    4 (12): ones([m, n])
                    5 (20): ones([m, n, p, ...])
                ]
                description (32): Create a matrix containing ones.
                examples [Array] (5): [
                    0 (7): ones(3)
                    1 (10): ones(3, 5)
                    2 (17): ones([2,3]) * 4.5
                    3 (22): a = [1, 2, 3; 4, 5, 6]
                    4 (13): ones(size(a))
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (5): range
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            partitionSelect [Object] (6): {
                name (15): partitionSelect
                category (6): Matrix
                syntax [Array] (2): [
                    0 (21): partitionSelect(x, k)
                    1 (30): partitionSelect(x, k, compare)
                ]
                description (132): Partition-based selection of an array or 1D matrix. Will find the kth smallest value, and mutates the input array. Uses Quickselect.
                examples [Array] (2): [
                    0 (30): partitionSelect([5, 10, 1], 2)
                    1 (40): partitionSelect(["C", "B", "A", "D"], 1)
                ]
                seealso [Array] (1): [
                    0 (4): sort
                ]
            }
            range [Object] (6): {
                name (5): range
                category (4): Type
                syntax [Array] (5): [
                    0 (9): start:end
                    1 (14): start:step:end
                    2 (17): range(start, end)
                    3 (23): range(start, end, step)
                    4 (13): range(string)
                ]
                description (78): Create a range. Lower bound of the range is included, upper bound is excluded.
                examples [Array] (7): [
                    0 (3): 1:5
                    1 (7): 3:-1:-3
                    2 (11): range(3, 7)
                    3 (15): range(0, 12, 2)
                    4 (13): range("4:10")
                    5 (28): a = [1, 2, 3, 4; 5, 6, 7, 8]
                    6 (11): a[1:2, 1:2]
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (4): size
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            resize [Object] (6): {
                name (6): resize
                category (6): Matrix
                syntax [Array] (2): [
                    0 (15): resize(x, size)
                    1 (29): resize(x, size, defaultValue)
                ]
                description (16): Resize a matrix.
                examples [Array] (5): [
                    0 (24): resize([1,2,3,4,5], [3])
                    1 (20): resize([1,2,3], [5])
                    2 (24): resize([1,2,3], [5], -1)
                    3 (17): resize(2, [2, 3])
                    4 (25): resize("hello", [8], "!")
                ]
                seealso [Array] (4): [
                    0 (4): size
                    1 (6): subset
                    2 (7): squeeze
                    3 (7): reshape
                ]
            }
            reshape [Object] (6): {
                name (7): reshape
                category (6): Matrix
                syntax [Array] (1): [
                    0 (17): reshape(x, sizes)
                ]
                description (66): Reshape a multi dimensional array to fit the specified dimensions.
                examples [Array] (3): [
                    0 (35): reshape([1, 2, 3, 4, 5, 6], [2, 3])
                    1 (33): reshape([[1, 2], [3, 4]], [1, 4])
                    2 (30): reshape([[1, 2], [3, 4]], [4])
                ]
                seealso [Array] (3): [
                    0 (4): size
                    1 (7): squeeze
                    2 (6): resize
                ]
            }
            row [Object] (6): {
                name (3): row
                category (6): Matrix
                syntax [Array] (1): [
                    0 (13): row(x, index)
                ]
                description (36): Return a row from a matrix or array.
                examples [Array] (3): [
                    0 (20): A = [[1, 2], [3, 4]]
                    1 (9): row(A, 1)
                    2 (9): row(A, 2)
                ]
                seealso [Array] (1): [
                    0 (6): column
                ]
            }
            size [Object] (6): {
                name (4): size
                category (6): Matrix
                syntax [Array] (1): [
                    0 (7): size(x)
                ]
                description (31): Calculate the size of a matrix.
                examples [Array] (5): [
                    0 (9): size(2.3)
                    1 (19): size("hello world")
                    2 (22): a = [1, 2; 3, 4; 5, 6]
                    3 (7): size(a)
                    4 (9): size(1:6)
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (7): squeeze
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            sort [Object] (6): {
                name (4): sort
                category (6): Matrix
                syntax [Array] (2): [
                    0 (7): sort(x)
                    1 (16): sort(x, compare)
                ]
                description (104): Sort the items in a matrix. Compare can be a string "asc", "desc", "natural", or a custom sort function.
                examples [Array] (5): [
                    0 (16): sort([5, 10, 1])
                    1 (26): sort(["C", "B", "A", "D"])
                    2 (44): sortByLength(a, b) = size(a)[1] - size(b)[1]
                    3 (46): sort(["Langdon", "Tom", "Sara"], sortByLength)
                    4 (33): sort(["10", "1", "2"], "natural")
                ]
                seealso [Array] (3): [
                    0 (3): map
                    1 (6): filter
                    2 (7): forEach
                ]
            }
            squeeze [Object] (6): {
                name (7): squeeze
                category (6): Matrix
                syntax [Array] (1): [
                    0 (10): squeeze(x)
                ]
                description (58): Remove inner and outer singleton dimensions from a matrix.
                examples [Array] (4): [
                    0 (16): a = zeros(3,2,1)
                    1 (16): size(squeeze(a))
                    2 (16): b = zeros(1,1,3)
                    3 (16): size(squeeze(b))
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (6): subset
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            subset [Object] (6): {
                name (6): subset
                category (6): Matrix
                syntax [Array] (4): [
                    0 (12): value(index)
                    1 (26): value(index) = replacement
                    2 (22): subset(value, [index])
                    3 (35): subset(value, [index], replacement)
                ]
                description (123): Get or set a subset of a matrix or string. Indexes are one-based. Both the ranges lower-bound and upper-bound are included.
                examples [Array] (7): [
                    0 (16): d = [1, 2; 3, 4]
                    1 (6): e = []
                    2 (18): e[1, 1:2] = [5, 6]
                    3 (16): e[2, :] = [7, 8]
                    4 (9): f = d * e
                    5 (7): f[2, 1]
                    6 (7): f[:, 1]
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (7): squeeze
                    9 (5): trace
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            trace [Object] (6): {
                name (5): trace
                category (6): Matrix
                syntax [Array] (1): [
                    0 (8): trace(A)
                ]
                description (97): Calculate the trace of a matrix: the sum of the elements on the main diagonal of a square matrix.
                examples [Array] (2): [
                    0 (32): A = [1, 2, 3; -1, 2, 3; 2, 0, 3]
                    1 (8): trace(A)
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (7): squeeze
                    9 (6): subset
                    10 (9): transpose
                    11 (5): zeros
                ]
            }
            transpose [Object] (6): {
                name (9): transpose
                category (6): Matrix
                syntax [Array] (2): [
                    0 (2): x'
                    1 (12): transpose(x)
                ]
                description (18): Transpose a matrix
                examples [Array] (3): [
                    0 (22): a = [1, 2, 3; 4, 5, 6]
                    1 (2): a'
                    2 (12): transpose(a)
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (7): squeeze
                    9 (6): subset
                    10 (5): trace
                    11 (5): zeros
                ]
            }
            zeros [Object] (6): {
                name (5): zeros
                category (6): Matrix
                syntax [Array] (6): [
                    0 (8): zeros(m)
                    1 (11): zeros(m, n)
                    2 (19): zeros(m, n, p, ...)
                    3 (10): zeros([m])
                    4 (13): zeros([m, n])
                    5 (21): zeros([m, n, p, ...])
                ]
                description (33): Create a matrix containing zeros.
                examples [Array] (4): [
                    0 (8): zeros(3)
                    1 (11): zeros(3, 5)
                    2 (22): a = [1, 2, 3; 4, 5, 6]
                    3 (14): zeros(size(a))
                ]
                seealso [Array] (12): [
                    0 (6): concat
                    1 (3): det
                    2 (4): diag
                    3 (8): identity
                    4 (3): inv
                    5 (4): ones
                    6 (5): range
                    7 (4): size
                    8 (7): squeeze
                    9 (6): subset
                    10 (5): trace
                    11 (9): transpose
                ]
            }
            combinations [Object] (6): {
                name (12): combinations
                category (11): Probability
                syntax [Array] (1): [
                    0 (18): combinations(n, k)
                ]
                description (63): Compute the number of combinations of n items taken k at a time
                examples [Array] (1): [
                    0 (18): combinations(7, 5)
                ]
                seealso [Array] (3): [
                    0 (19): combinationsWithRep
                    1 (12): permutations
                    2 (9): factorial
                ]
            }
            combinationsWithRep [Object] (6): {
                name (19): combinationsWithRep
                category (11): Probability
                syntax [Array] (1): [
                    0 (25): combinationsWithRep(n, k)
                ]
                description (82): Compute the number of combinations of n items taken k at a time with replacements.
                examples [Array] (1): [
                    0 (25): combinationsWithRep(7, 5)
                ]
                seealso [Array] (3): [
                    0 (12): combinations
                    1 (12): permutations
                    2 (9): factorial
                ]
            }
            factorial [Object] (6): {
                name (9): factorial
                category (11): Probability
                syntax [Array] (2): [
                    0 (2): n!
                    1 (12): factorial(n)
                ]
                description (32): Compute the factorial of a value
                examples [Array] (3): [
                    0 (2): 5!
                    1 (17): 5 * 4 * 3 * 2 * 1
                    2 (2): 3!
                ]
                seealso [Array] (4): [
                    0 (12): combinations
                    1 (19): combinationsWithRep
                    2 (12): permutations
                    3 (5): gamma
                ]
            }
            gamma [Object] (6): {
                name (5): gamma
                category (11): Probability
                syntax [Array] (1): [
                    0 (8): gamma(n)
                ]
                description (138): Compute the gamma function. For small values, the Lanczos approximation is used, and for large values the extended Stirling approximation.
                examples [Array] (4): [
                    0 (8): gamma(4)
                    1 (2): 3!
                    2 (10): gamma(1/2)
                    3 (8): sqrt(pi)
                ]
                seealso [Array] (1): [
                    0 (9): factorial
                ]
            }
            kldivergence [Object] (6): {
                name (12): kldivergence
                category (11): Probability
                syntax [Array] (1): [
                    0 (18): kldivergence(x, y)
                ]
                description (74): Calculate the Kullback-Leibler (KL) divergence  between two distributions.
                examples [Array] (1): [
                    0 (42): kldivergence([0.7,0.5,0.4], [0.2,0.9,0.5])
                ]
                seealso [Array] (0): []
            }
            multinomial [Object] (6): {
                name (11): multinomial
                category (11): Probability
                syntax [Array] (1): [
                    0 (14): multinomial(A)
                ]
                description (233): Multinomial Coefficients compute the number of ways of picking a1, a2, ..., ai unordered outcomes from `n` possibilities. multinomial takes one array of integers as an argument. The following condition must be enforced: every ai > 0.
                examples [Array] (1): [
                    0 (22): multinomial([1, 2, 1])
                ]
                seealso [Array] (2): [
                    0 (12): combinations
                    1 (9): factorial
                ]
            }
            permutations [Object] (6): {
                name (12): permutations
                category (11): Probability
                syntax [Array] (2): [
                    0 (15): permutations(n)
                    1 (18): permutations(n, k)
                ]
                description (63): Compute the number of permutations of n items taken k at a time
                examples [Array] (2): [
                    0 (15): permutations(5)
                    1 (18): permutations(5, 3)
                ]
                seealso [Array] (3): [
                    0 (12): combinations
                    1 (19): combinationsWithRep
                    2 (9): factorial
                ]
            }
            pickRandom [Object] (6): {
                name (10): pickRandom
                category (11): Probability
                syntax [Array] (5): [
                    0 (17): pickRandom(array)
                    1 (25): pickRandom(array, number)
                    2 (26): pickRandom(array, weights)
                    3 (34): pickRandom(array, number, weights)
                    4 (34): pickRandom(array, weights, number)
                ]
                description (39): Pick a random entry from a given array.
                examples [Array] (6): [
                    0 (16): pickRandom(0:10)
                    1 (24): pickRandom([1, 3, 1, 6])
                    2 (27): pickRandom([1, 3, 1, 6], 2)
                    3 (38): pickRandom([1, 3, 1, 6], [2, 3, 2, 1])
                    4 (41): pickRandom([1, 3, 1, 6], 2, [2, 3, 2, 1])
                    5 (41): pickRandom([1, 3, 1, 6], [2, 3, 2, 1], 2)
                ]
                seealso [Array] (2): [
                    0 (6): random
                    1 (9): randomInt
                ]
            }
            random [Object] (6): {
                name (6): random
                category (11): Probability
                syntax [Array] (6): [
                    0 (8): random()
                    1 (11): random(max)
                    2 (16): random(min, max)
                    3 (12): random(size)
                    4 (17): random(size, max)
                    5 (22): random(size, min, max)
                ]
                description (23): Return a random number.
                examples [Array] (3): [
                    0 (8): random()
                    1 (14): random(10, 20)
                    2 (14): random([2, 3])
                ]
                seealso [Array] (2): [
                    0 (10): pickRandom
                    1 (9): randomInt
                ]
            }
            randomInt [Object] (6): {
                name (9): randomInt
                category (11): Probability
                syntax [Array] (5): [
                    0 (14): randomInt(max)
                    1 (19): randomInt(min, max)
                    2 (15): randomInt(size)
                    3 (20): randomInt(size, max)
                    4 (25): randomInt(size, min, max)
                ]
                description (30): Return a random integer number
                examples [Array] (2): [
                    0 (17): randomInt(10, 20)
                    1 (21): randomInt([2, 3], 10)
                ]
                seealso [Array] (2): [
                    0 (10): pickRandom
                    1 (6): random
                ]
            }
            compare [Object] (6): {
                name (7): compare
                category (10): Relational
                syntax [Array] (1): [
                    0 (13): compare(x, y)
                ]
                description (75): Compare two values. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
                examples [Array] (5): [
                    0 (13): compare(2, 3)
                    1 (13): compare(3, 2)
                    2 (13): compare(2, 2)
                    3 (18): compare(5cm, 40mm)
                    4 (21): compare(2, [1, 2, 3])
                ]
                seealso [Array] (7): [
                    0 (5): equal
                    1 (7): unequal
                    2 (7): smaller
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (14): compareNatural
                    6 (11): compareText
                ]
            }
            compareNatural [Object] (6): {
                name (14): compareNatural
                category (10): Relational
                syntax [Array] (1): [
                    0 (20): compareNatural(x, y)
                ]
                description (119): Compare two values of any type in a deterministic, natural way. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
                examples [Array] (10): [
                    0 (20): compareNatural(2, 3)
                    1 (20): compareNatural(3, 2)
                    2 (20): compareNatural(2, 2)
                    3 (25): compareNatural(5cm, 40mm)
                    4 (25): compareNatural("2", "10")
                    5 (30): compareNatural(2 + 3i, 2 + 4i)
                    6 (36): compareNatural([1, 2, 4], [1, 2, 3])
                    7 (33): compareNatural([1, 5], [1, 2, 3])
                    8 (30): compareNatural([1, 2], [1, 2])
                    9 (30): compareNatural({a: 2}, {a: 4})
                ]
                seealso [Array] (7): [
                    0 (5): equal
                    1 (7): unequal
                    2 (7): smaller
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (7): compare
                    6 (11): compareText
                ]
            }
            compareText [Object] (6): {
                name (11): compareText
                category (10): Relational
                syntax [Array] (1): [
                    0 (17): compareText(x, y)
                ]
                description (116): Compare two strings lexically. Comparison is case sensitive. Returns 1 when x > y, -1 when x < y, and 0 when x == y.
                examples [Array] (8): [
                    0 (21): compareText("B", "A")
                    1 (21): compareText("A", "B")
                    2 (21): compareText("A", "A")
                    3 (22): compareText("2", "10")
                    4 (18): compare("2", "10")
                    5 (14): compare(2, 10)
                    6 (25): compareNatural("2", "10")
                    7 (33): compareText("B", ["A", "B", "C"])
                ]
                seealso [Array] (2): [
                    0 (7): compare
                    1 (14): compareNatural
                ]
            }
            deepEqual [Object] (6): {
                name (9): deepEqual
                category (10): Relational
                syntax [Array] (1): [
                    0 (15): deepEqual(x, y)
                ]
                description (140): Check equality of two matrices element wise. Returns true if the size of both matrices is equal and when and each of the elements are equal.
                examples [Array] (2): [
                    0 (27): deepEqual([1,3,4], [1,3,4])
                    1 (25): deepEqual([1,3,4], [1,3])
                ]
                seealso [Array] (7): [
                    0 (5): equal
                    1 (7): unequal
                    2 (7): smaller
                    3 (6): larger
                    4 (9): smallerEq
                    5 (8): largerEq
                    6 (7): compare
                ]
            }
            equal [Object] (6): {
                name (5): equal
                category (10): Relational
                syntax [Array] (2): [
                    0 (6): x == y
                    1 (11): equal(x, y)
                ]
                description (85): Check equality of two values. Returns true if the values are equal, and false if not.
                examples [Array] (6): [
                    0 (8): 2+2 == 3
                    1 (8): 2+2 == 4
                    2 (7): a = 3.2
                    3 (9): b = 6-2.8
                    4 (6): a == b
                    5 (12): 50cm == 0.5m
                ]
                seealso [Array] (8): [
                    0 (7): unequal
                    1 (7): smaller
                    2 (6): larger
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (7): compare
                    6 (9): deepEqual
                    7 (9): equalText
                ]
            }
            equalText [Object] (6): {
                name (9): equalText
                category (10): Relational
                syntax [Array] (1): [
                    0 (15): equalText(x, y)
                ]
                description (116): Check equality of two strings. Comparison is case sensitive. Returns true if the values are equal, and false if not.
                examples [Array] (5): [
                    0 (27): equalText("Hello", "Hello")
                    1 (19): equalText("a", "A")
                    2 (20): equal("2e3", "2000")
                    3 (24): equalText("2e3", "2000")
                    4 (31): equalText("B", ["A", "B", "C"])
                ]
                seealso [Array] (4): [
                    0 (7): compare
                    1 (14): compareNatural
                    2 (11): compareText
                    3 (5): equal
                ]
            }
            larger [Object] (6): {
                name (6): larger
                category (10): Relational
                syntax [Array] (2): [
                    0 (5): x > y
                    1 (12): larger(x, y)
                ]
                description (88): Check if value x is larger than y. Returns true if x is larger than y, and false if not.
                examples [Array] (7): [
                    0 (5): 2 > 3
                    1 (7): 5 > 2*2
                    2 (7): a = 3.3
                    3 (9): b = 6-2.8
                    4 (7): (a > b)
                    5 (7): (b < a)
                    6 (13): 5 cm > 2 inch
                ]
                seealso [Array] (6): [
                    0 (5): equal
                    1 (7): unequal
                    2 (7): smaller
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (7): compare
                ]
            }
            largerEq [Object] (6): {
                name (8): largerEq
                category (10): Relational
                syntax [Array] (2): [
                    0 (6): x >= y
                    1 (14): largerEq(x, y)
                ]
                description (102): Check if value x is larger or equal to y. Returns true if x is larger or equal to y, and false if not.
                examples [Array] (5): [
                    0 (8): 2 >= 1+1
                    1 (7): 2 > 1+1
                    2 (7): a = 3.2
                    3 (9): b = 6-2.8
                    4 (8): (a >= b)
                ]
                seealso [Array] (5): [
                    0 (5): equal
                    1 (7): unequal
                    2 (9): smallerEq
                    3 (7): smaller
                    4 (7): compare
                ]
            }
            smaller [Object] (6): {
                name (7): smaller
                category (10): Relational
                syntax [Array] (2): [
                    0 (5): x < y
                    1 (13): smaller(x, y)
                ]
                description (96): Check if value x is smaller than value y. Returns true if x is smaller than y, and false if not.
                examples [Array] (6): [
                    0 (5): 2 < 3
                    1 (7): 5 < 2*2
                    2 (7): a = 3.3
                    3 (9): b = 6-2.8
                    4 (7): (a < b)
                    5 (13): 5 cm < 2 inch
                ]
                seealso [Array] (6): [
                    0 (5): equal
                    1 (7): unequal
                    2 (6): larger
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (7): compare
                ]
            }
            smallerEq [Object] (6): {
                name (9): smallerEq
                category (10): Relational
                syntax [Array] (2): [
                    0 (6): x <= y
                    1 (15): smallerEq(x, y)
                ]
                description (103): Check if value x is smaller or equal to value y. Returns true if x is smaller than y, and false if not.
                examples [Array] (5): [
                    0 (8): 2 <= 1+1
                    1 (7): 2 < 1+1
                    2 (7): a = 3.2
                    3 (9): b = 6-2.8
                    4 (8): (a <= b)
                ]
                seealso [Array] (6): [
                    0 (5): equal
                    1 (7): unequal
                    2 (6): larger
                    3 (7): smaller
                    4 (8): largerEq
                    5 (7): compare
                ]
            }
            unequal [Object] (6): {
                name (7): unequal
                category (10): Relational
                syntax [Array] (2): [
                    0 (6): x != y
                    1 (13): unequal(x, y)
                ]
                description (100): Check unequality of two values. Returns true if the values are unequal, and false if they are equal.
                examples [Array] (7): [
                    0 (8): 2+2 != 3
                    1 (8): 2+2 != 4
                    2 (7): a = 3.2
                    3 (9): b = 6-2.8
                    4 (6): a != b
                    5 (12): 50cm != 0.5m
                    6 (14): 5 cm != 2 inch
                ]
                seealso [Array] (7): [
                    0 (5): equal
                    1 (7): smaller
                    2 (6): larger
                    3 (9): smallerEq
                    4 (8): largerEq
                    5 (7): compare
                    6 (9): deepEqual
                ]
            }
            setCartesian [Object] (6): {
                name (12): setCartesian
                category (3): Set
                syntax [Array] (1): [
                    0 (24): setCartesian(set1, set2)
                ]
                description (138): Create the cartesian product of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (1): [
                    0 (28): setCartesian([1, 2], [3, 4])
                ]
                seealso [Array] (4): [
                    0 (8): setUnion
                    1 (12): setIntersect
                    2 (13): setDifference
                    3 (11): setPowerset
                ]
            }
            setDifference [Object] (6): {
                name (13): setDifference
                category (3): Set
                syntax [Array] (1): [
                    0 (25): setDifference(set1, set2)
                ]
                description (187): Create the difference of two (multi)sets: every element of set1, that is not the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (2): [
                    0 (41): setDifference([1, 2, 3, 4], [3, 4, 5, 6])
                    1 (49): setDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])
                ]
                seealso [Array] (3): [
                    0 (8): setUnion
                    1 (12): setIntersect
                    2 (16): setSymDifference
                ]
            }
            setDistinct [Object] (6): {
                name (11): setDistinct
                category (3): Set
                syntax [Array] (1): [
                    0 (16): setDistinct(set)
                ]
                description (136): Collect the distinct elements of a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.
                examples [Array] (1): [
                    0 (31): setDistinct([1, 1, 1, 2, 2, 3])
                ]
                seealso [Array] (1): [
                    0 (15): setMultiplicity
                ]
            }
            setIntersect [Object] (6): {
                name (12): setIntersect
                category (3): Set
                syntax [Array] (1): [
                    0 (24): setIntersect(set1, set2)
                ]
                description (133): Create the intersection of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (2): [
                    0 (40): setIntersect([1, 2, 3, 4], [3, 4, 5, 6])
                    1 (48): setIntersect([[1, 2], [3, 4]], [[3, 4], [5, 6]])
                ]
                seealso [Array] (2): [
                    0 (8): setUnion
                    1 (13): setDifference
                ]
            }
            setIsSubset [Object] (6): {
                name (11): setIsSubset
                category (3): Set
                syntax [Array] (1): [
                    0 (23): setIsSubset(set1, set2)
                ]
                description (197): Check whether a (multi)set is a subset of another (multi)set: every element of set1 is the element of set2. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (2): [
                    0 (33): setIsSubset([1, 2], [3, 4, 5, 6])
                    1 (33): setIsSubset([3, 4], [3, 4, 5, 6])
                ]
                seealso [Array] (3): [
                    0 (8): setUnion
                    1 (12): setIntersect
                    2 (13): setDifference
                ]
            }
            setMultiplicity [Object] (6): {
                name (15): setMultiplicity
                category (3): Set
                syntax [Array] (1): [
                    0 (29): setMultiplicity(element, set)
                ]
                description (143): Count the multiplicity of an element in a multiset. A multi-dimension array will be converted to a single-dimension array before the operation.
                examples [Array] (2): [
                    0 (32): setMultiplicity(1, [1, 2, 2, 4])
                    1 (32): setMultiplicity(2, [1, 2, 2, 4])
                ]
                seealso [Array] (2): [
                    0 (11): setDistinct
                    1 (7): setSize
                ]
            }
            setPowerset [Object] (6): {
                name (11): setPowerset
                category (3): Set
                syntax [Array] (1): [
                    0 (16): setPowerset(set)
                ]
                description (189): Create the powerset of a (multi)set: the powerset contains very possible subsets of a (multi)set. A multi-dimension array will be converted to a single-dimension array before the operation.
                examples [Array] (1): [
                    0 (22): setPowerset([1, 2, 3])
                ]
                seealso [Array] (1): [
                    0 (12): setCartesian
                ]
            }
            setSize [Object] (6): {
                name (7): setSize
                category (3): Set
                syntax [Array] (2): [
                    0 (12): setSize(set)
                    1 (20): setSize(set, unique)
                ]
                description (211): Count the number of elements of a (multi)set. When the second parameter "unique" is true, count only the unique values. A multi-dimension array will be converted to a single-dimension array before the operation.
                examples [Array] (2): [
                    0 (21): setSize([1, 2, 2, 4])
                    1 (27): setSize([1, 2, 2, 4], true)
                ]
                seealso [Array] (3): [
                    0 (8): setUnion
                    1 (12): setIntersect
                    2 (13): setDifference
                ]
            }
            setSymDifference [Object] (6): {
                name (16): setSymDifference
                category (3): Set
                syntax [Array] (1): [
                    0 (28): setSymDifference(set1, set2)
                ]
                description (141): Create the symmetric difference of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (2): [
                    0 (44): setSymDifference([1, 2, 3, 4], [3, 4, 5, 6])
                    1 (52): setSymDifference([[1, 2], [3, 4]], [[3, 4], [5, 6]])
                ]
                seealso [Array] (3): [
                    0 (8): setUnion
                    1 (12): setIntersect
                    2 (13): setDifference
                ]
            }
            setUnion [Object] (6): {
                name (8): setUnion
                category (3): Set
                syntax [Array] (1): [
                    0 (20): setUnion(set1, set2)
                ]
                description (126): Create the union of two (multi)sets. Multi-dimension arrays will be converted to single-dimension arrays before the operation.
                examples [Array] (2): [
                    0 (36): setUnion([1, 2, 3, 4], [3, 4, 5, 6])
                    1 (44): setUnion([[1, 2], [3, 4]], [[3, 4], [5, 6]])
                ]
                seealso [Array] (2): [
                    0 (12): setIntersect
                    1 (13): setDifference
                ]
            }
            erf [Object] (6): {
                name (3): erf
                category (7): Special
                syntax [Array] (1): [
                    0 (6): erf(x)
                ]
                description (106): Compute the erf function of a value using a rational Chebyshev approximations for different intervals of x
                examples [Array] (3): [
                    0 (8): erf(0.2)
                    1 (9): erf(-0.5)
                    2 (6): erf(4)
                ]
                seealso [Array] (0): []
            }
            mad [Object] (6): {
                name (3): mad
                category (10): Statistics
                syntax [Array] (2): [
                    0 (17): mad(a, b, c, ...)
                    1 (6): mad(A)
                ]
                description (171): Compute the median absolute deviation of a matrix or a list with values. The median absolute deviation is defined as the median of the absolute deviations from the median.
                examples [Array] (2): [
                    0 (15): mad(10, 20, 30)
                    1 (14): mad([1, 2, 3])
                ]
                seealso [Array] (4): [
                    0 (4): mean
                    1 (6): median
                    2 (3): std
                    3 (3): abs
                ]
            }
            max [Object] (6): {
                name (3): max
                category (10): Statistics
                syntax [Array] (3): [
                    0 (17): max(a, b, c, ...)
                    1 (6): max(A)
                    2 (11): max(A, dim)
                ]
                description (46): Compute the maximum value of a list of values.
                examples [Array] (7): [
                    0 (15): max(2, 3, 4, 1)
                    1 (17): max([2, 3, 4, 1])
                    2 (17): max([2, 5; 4, 3])
                    3 (20): max([2, 5; 4, 3], 1)
                    4 (20): max([2, 5; 4, 3], 2)
                    5 (29): max(2.7, 7.1, -4.5, 2.0, 4.1)
                    6 (29): min(2.7, 7.1, -4.5, 2.0, 4.1)
                ]
                seealso [Array] (7): [
                    0 (4): mean
                    1 (6): median
                    2 (3): min
                    3 (4): prod
                    4 (3): std
                    5 (3): sum
                    6 (8): variance
                ]
            }
            mean [Object] (6): {
                name (4): mean
                category (10): Statistics
                syntax [Array] (3): [
                    0 (18): mean(a, b, c, ...)
                    1 (7): mean(A)
                    2 (12): mean(A, dim)
                ]
                description (48): Compute the arithmetic mean of a list of values.
                examples [Array] (6): [
                    0 (16): mean(2, 3, 4, 1)
                    1 (18): mean([2, 3, 4, 1])
                    2 (18): mean([2, 5; 4, 3])
                    3 (21): mean([2, 5; 4, 3], 1)
                    4 (21): mean([2, 5; 4, 3], 2)
                    5 (26): mean([1.0, 2.7, 3.2, 4.0])
                ]
                seealso [Array] (7): [
                    0 (3): max
                    1 (6): median
                    2 (3): min
                    3 (4): prod
                    4 (3): std
                    5 (3): sum
                    6 (8): variance
                ]
            }
            median [Object] (6): {
                name (6): median
                category (10): Statistics
                syntax [Array] (2): [
                    0 (20): median(a, b, c, ...)
                    1 (9): median(A)
                ]
                description (176): Compute the median of all values. The values are sorted and the middle value is returned. In case of an even number of values, the average of the two middle values is returned.
                examples [Array] (2): [
                    0 (15): median(5, 2, 7)
                    1 (21): median([3, -1, 5, 7])
                ]
                seealso [Array] (8): [
                    0 (3): max
                    1 (4): mean
                    2 (3): min
                    3 (4): prod
                    4 (3): std
                    5 (3): sum
                    6 (8): variance
                    7 (11): quantileSeq
                ]
            }
            min [Object] (6): {
                name (3): min
                category (10): Statistics
                syntax [Array] (3): [
                    0 (17): min(a, b, c, ...)
                    1 (6): min(A)
                    2 (11): min(A, dim)
                ]
                description (46): Compute the minimum value of a list of values.
                examples [Array] (7): [
                    0 (15): min(2, 3, 4, 1)
                    1 (17): min([2, 3, 4, 1])
                    2 (17): min([2, 5; 4, 3])
                    3 (20): min([2, 5; 4, 3], 1)
                    4 (20): min([2, 5; 4, 3], 2)
                    5 (29): min(2.7, 7.1, -4.5, 2.0, 4.1)
                    6 (29): max(2.7, 7.1, -4.5, 2.0, 4.1)
                ]
                seealso [Array] (7): [
                    0 (3): max
                    1 (4): mean
                    2 (6): median
                    3 (4): prod
                    4 (3): std
                    5 (3): sum
                    6 (8): variance
                ]
            }
            mode [Object] (6): {
                name (4): mode
                category (10): Statistics
                syntax [Array] (3): [
                    0 (18): mode(a, b, c, ...)
                    1 (7): mode(A)
                    2 (24): mode(A, a, b, B, c, ...)
                ]
                description (120): Computes the mode of all values as an array. In case mode being more than one, multiple values are returned in an array.
                examples [Array] (3): [
                    0 (19): mode(2, 1, 4, 3, 1)
                    1 (27): mode([1, 2.7, 3.2, 4, 2.7])
                    2 (19): mode(1, 4, 6, 1, 6)
                ]
                seealso [Array] (8): [
                    0 (3): max
                    1 (4): mean
                    2 (3): min
                    3 (6): median
                    4 (4): prod
                    5 (3): std
                    6 (3): sum
                    7 (8): variance
                ]
            }
            prod [Object] (6): {
                name (4): prod
                category (10): Statistics
                syntax [Array] (2): [
                    0 (18): prod(a, b, c, ...)
                    1 (7): prod(A)
                ]
                description (34): Compute the product of all values.
                examples [Array] (3): [
                    0 (13): prod(2, 3, 4)
                    1 (15): prod([2, 3, 4])
                    2 (18): prod([2, 5; 4, 3])
                ]
                seealso [Array] (8): [
                    0 (3): max
                    1 (4): mean
                    2 (3): min
                    3 (6): median
                    4 (3): min
                    5 (3): std
                    6 (3): sum
                    7 (8): variance
                ]
            }
            quantileSeq [Object] (6): {
                name (11): quantileSeq
                category (10): Statistics
                syntax [Array] (3): [
                    0 (30): quantileSeq(A, prob[, sorted])
                    1 (45): quantileSeq(A, [prob1, prob2, ...][, sorted])
                    2 (27): quantileSeq(A, N[, sorted])
                ]
                description (353): Compute the prob order quantile of a matrix or a list with values. The sequence is sorted and the middle value is returned. Supported types of sequence values are: Number, BigNumber, Unit Supported types of probablity are: Number, BigNumber. 

In case of a (multi dimensional) array or matrix, the prob order quantile of all elements will be calculated.
                examples [Array] (4): [
                    0 (31): quantileSeq([3, -1, 5, 7], 0.5)
                    1 (38): quantileSeq([3, -1, 5, 7], [1/3, 2/3])
                    2 (29): quantileSeq([3, -1, 5, 7], 2)
                    3 (37): quantileSeq([-1, 3, 5, 7], 0.5, true)
                ]
                seealso [Array] (8): [
                    0 (4): mean
                    1 (6): median
                    2 (3): min
                    3 (3): max
                    4 (4): prod
                    5 (3): std
                    6 (3): sum
                    7 (8): variance
                ]
            }
            std [Object] (6): {
                name (3): std
                category (10): Statistics
                syntax [Array] (3): [
                    0 (17): std(a, b, c, ...)
                    1 (6): std(A)
                    2 (21): std(A, normalization)
                ]
                description (174): Compute the standard deviation of all values, defined as std(A) = sqrt(variance(A)). Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".
                examples [Array] (5): [
                    0 (12): std(2, 4, 6)
                    1 (17): std([2, 4, 6, 8])
                    2 (32): std([2, 4, 6, 8], "uncorrected")
                    3 (27): std([2, 4, 6, 8], "biased")
                    4 (23): std([1, 2, 3; 4, 5, 6])
                ]
                seealso [Array] (7): [
                    0 (3): max
                    1 (4): mean
                    2 (3): min
                    3 (6): median
                    4 (4): prod
                    5 (3): sum
                    6 (8): variance
                ]
            }
            sum [Object] (6): {
                name (3): sum
                category (10): Statistics
                syntax [Array] (2): [
                    0 (17): sum(a, b, c, ...)
                    1 (6): sum(A)
                ]
                description (30): Compute the sum of all values.
                examples [Array] (3): [
                    0 (15): sum(2, 3, 4, 1)
                    1 (17): sum([2, 3, 4, 1])
                    2 (17): sum([2, 5; 4, 3])
                ]
                seealso [Array] (8): [
                    0 (3): max
                    1 (4): mean
                    2 (6): median
                    3 (3): min
                    4 (4): prod
                    5 (3): std
                    6 (3): sum
                    7 (8): variance
                ]
            }
            variance [Object] (6): {
                name (8): variance
                category (10): Statistics
                syntax [Array] (3): [
                    0 (22): variance(a, b, c, ...)
                    1 (11): variance(A)
                    2 (26): variance(A, normalization)
                ]
                description (125): Compute the variance of all values. Optional parameter normalization can be "unbiased" (default), "uncorrected", or "biased".
                examples [Array] (5): [
                    0 (17): variance(2, 4, 6)
                    1 (22): variance([2, 4, 6, 8])
                    2 (37): variance([2, 4, 6, 8], "uncorrected")
                    3 (32): variance([2, 4, 6, 8], "biased")
                    4 (28): variance([1, 2, 3; 4, 5, 6])
                ]
                seealso [Array] (8): [
                    0 (3): max
                    1 (4): mean
                    2 (3): min
                    3 (6): median
                    4 (3): min
                    5 (4): prod
                    6 (3): std
                    7 (3): sum
                ]
            }
            acos [Object] (6): {
                name (4): acos
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): acos(x)
                ]
                description (49): Compute the inverse cosine of a value in radians.
                examples [Array] (2): [
                    0 (9): acos(0.5)
                    1 (14): acos(cos(2.3))
                ]
                seealso [Array] (3): [
                    0 (3): cos
                    1 (4): atan
                    2 (4): asin
                ]
            }
            acosh [Object] (6): {
                name (5): acosh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): acosh(x)
                ]
                description (90): Calculate the hyperbolic arccos of a value, defined as `acosh(x) = ln(sqrt(x^2 - 1) + x)`.
                examples [Array] (1): [
                    0 (10): acosh(1.5)
                ]
                seealso [Array] (3): [
                    0 (4): cosh
                    1 (5): asinh
                    2 (5): atanh
                ]
            }
            acot [Object] (6): {
                name (4): acot
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): acot(x)
                ]
                description (43): Calculate the inverse cotangent of a value.
                examples [Array] (3): [
                    0 (9): acot(0.5)
                    1 (14): acot(cot(0.5))
                    2 (7): acot(2)
                ]
                seealso [Array] (2): [
                    0 (3): cot
                    1 (4): atan
                ]
            }
            acoth [Object] (6): {
                name (5): acoth
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): acoth(x)
                ]
                description (106): Calculate the hyperbolic arccotangent of a value, defined as `acoth(x) = (ln((x+1)/x) + ln(x/(x-1))) / 2`.
                examples [Array] (2): [
                    0 (8): acoth(2)
                    1 (10): acoth(0.5)
                ]
                seealso [Array] (2): [
                    0 (5): acsch
                    1 (5): asech
                ]
            }
            acsc [Object] (6): {
                name (4): acsc
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): acsc(x)
                ]
                description (43): Calculate the inverse cotangent of a value.
                examples [Array] (3): [
                    0 (7): acsc(2)
                    1 (14): acsc(csc(0.5))
                    2 (9): acsc(0.5)
                ]
                seealso [Array] (3): [
                    0 (3): csc
                    1 (4): asin
                    2 (4): asec
                ]
            }
            acsch [Object] (6): {
                name (5): acsch
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): acsch(x)
                ]
                description (99): Calculate the hyperbolic arccosecant of a value, defined as `acsch(x) = ln(1/x + sqrt(1/x^2 + 1))`.
                examples [Array] (1): [
                    0 (10): acsch(0.5)
                ]
                seealso [Array] (2): [
                    0 (5): asech
                    1 (5): acoth
                ]
            }
            asec [Object] (6): {
                name (4): asec
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): asec(x)
                ]
                description (40): Calculate the inverse secant of a value.
                examples [Array] (3): [
                    0 (9): asec(0.5)
                    1 (14): asec(sec(0.5))
                    2 (7): asec(2)
                ]
                seealso [Array] (3): [
                    0 (4): acos
                    1 (4): acot
                    2 (4): acsc
                ]
            }
            asech [Object] (6): {
                name (5): asech
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): asech(x)
                ]
                description (40): Calculate the inverse secant of a value.
                examples [Array] (1): [
                    0 (10): asech(0.5)
                ]
                seealso [Array] (2): [
                    0 (5): acsch
                    1 (5): acoth
                ]
            }
            asin [Object] (6): {
                name (4): asin
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): asin(x)
                ]
                description (47): Compute the inverse sine of a value in radians.
                examples [Array] (2): [
                    0 (9): asin(0.5)
                    1 (14): asin(sin(0.5))
                ]
                seealso [Array] (3): [
                    0 (3): sin
                    1 (4): acos
                    2 (4): atan
                ]
            }
            asinh [Object] (6): {
                name (5): asinh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): asinh(x)
                ]
                description (91): Calculate the hyperbolic arcsine of a value, defined as `asinh(x) = ln(x + sqrt(x^2 + 1))`.
                examples [Array] (1): [
                    0 (10): asinh(0.5)
                ]
                seealso [Array] (2): [
                    0 (5): acosh
                    1 (5): atanh
                ]
            }
            atan [Object] (6): {
                name (4): atan
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): atan(x)
                ]
                description (50): Compute the inverse tangent of a value in radians.
                examples [Array] (2): [
                    0 (9): atan(0.5)
                    1 (14): atan(tan(0.5))
                ]
                seealso [Array] (3): [
                    0 (3): tan
                    1 (4): acos
                    2 (4): asin
                ]
            }
            atanh [Object] (6): {
                name (5): atanh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (8): atanh(x)
                ]
                description (96): Calculate the hyperbolic arctangent of a value, defined as `atanh(x) = ln((1 + x)/(1 - x)) / 2`.
                examples [Array] (1): [
                    0 (10): atanh(0.5)
                ]
                seealso [Array] (2): [
                    0 (5): acosh
                    1 (5): asinh
                ]
            }
            atan2 [Object] (6): {
                name (5): atan2
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (11): atan2(y, x)
                ]
                description (66): Computes the principal value of the arc tangent of y/x in radians.
                examples [Array] (5): [
                    0 (16): atan2(2, 2) / pi
                    1 (21): angle = 60 deg in rad
                    2 (14): x = cos(angle)
                    3 (14): y = sin(angle)
                    4 (11): atan2(y, x)
                ]
                seealso [Array] (3): [
                    0 (3): sin
                    1 (3): cos
                    2 (3): tan
                ]
            }
            cos [Object] (6): {
                name (3): cos
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): cos(x)
                ]
                description (35): Compute the cosine of x in radians.
                examples [Array] (5): [
                    0 (6): cos(2)
                    1 (15): cos(pi / 4) ^ 2
                    2 (12): cos(180 deg)
                    3 (11): cos(60 deg)
                    4 (23): sin(0.2)^2 + cos(0.2)^2
                ]
                seealso [Array] (3): [
                    0 (4): acos
                    1 (3): sin
                    2 (3): tan
                ]
            }
            cosh [Object] (6): {
                name (4): cosh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): cosh(x)
                ]
                description (46): Compute the hyperbolic cosine of x in radians.
                examples [Array] (1): [
                    0 (9): cosh(0.5)
                ]
                seealso [Array] (3): [
                    0 (4): sinh
                    1 (4): tanh
                    2 (4): coth
                ]
            }
            cot [Object] (6): {
                name (3): cot
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): cot(x)
                ]
                description (58): Compute the cotangent of x in radians. Defined as 1/tan(x)
                examples [Array] (2): [
                    0 (6): cot(2)
                    1 (10): 1 / tan(2)
                ]
                seealso [Array] (3): [
                    0 (3): sec
                    1 (3): csc
                    2 (3): tan
                ]
            }
            coth [Object] (6): {
                name (4): coth
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): coth(x)
                ]
                description (49): Compute the hyperbolic cotangent of x in radians.
                examples [Array] (2): [
                    0 (7): coth(2)
                    1 (11): 1 / tanh(2)
                ]
                seealso [Array] (3): [
                    0 (4): sech
                    1 (4): csch
                    2 (4): tanh
                ]
            }
            csc [Object] (6): {
                name (3): csc
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): csc(x)
                ]
                description (57): Compute the cosecant of x in radians. Defined as 1/sin(x)
                examples [Array] (2): [
                    0 (6): csc(2)
                    1 (10): 1 / sin(2)
                ]
                seealso [Array] (3): [
                    0 (3): sec
                    1 (3): cot
                    2 (3): sin
                ]
            }
            csch [Object] (6): {
                name (4): csch
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): csch(x)
                ]
                description (69): Compute the hyperbolic cosecant of x in radians. Defined as 1/sinh(x)
                examples [Array] (2): [
                    0 (7): csch(2)
                    1 (11): 1 / sinh(2)
                ]
                seealso [Array] (3): [
                    0 (4): sech
                    1 (4): coth
                    2 (4): sinh
                ]
            }
            sec [Object] (6): {
                name (3): sec
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): sec(x)
                ]
                description (55): Compute the secant of x in radians. Defined as 1/cos(x)
                examples [Array] (2): [
                    0 (6): sec(2)
                    1 (10): 1 / cos(2)
                ]
                seealso [Array] (3): [
                    0 (3): cot
                    1 (3): csc
                    2 (3): cos
                ]
            }
            sech [Object] (6): {
                name (4): sech
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): sech(x)
                ]
                description (67): Compute the hyperbolic secant of x in radians. Defined as 1/cosh(x)
                examples [Array] (2): [
                    0 (7): sech(2)
                    1 (11): 1 / cosh(2)
                ]
                seealso [Array] (3): [
                    0 (4): coth
                    1 (4): csch
                    2 (4): cosh
                ]
            }
            sin [Object] (6): {
                name (3): sin
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): sin(x)
                ]
                description (33): Compute the sine of x in radians.
                examples [Array] (5): [
                    0 (6): sin(2)
                    1 (15): sin(pi / 4) ^ 2
                    2 (11): sin(90 deg)
                    3 (11): sin(30 deg)
                    4 (23): sin(0.2)^2 + cos(0.2)^2
                ]
                seealso [Array] (3): [
                    0 (4): asin
                    1 (3): cos
                    2 (3): tan
                ]
            }
            sinh [Object] (6): {
                name (4): sinh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): sinh(x)
                ]
                description (44): Compute the hyperbolic sine of x in radians.
                examples [Array] (1): [
                    0 (9): sinh(0.5)
                ]
                seealso [Array] (2): [
                    0 (4): cosh
                    1 (4): tanh
                ]
            }
            tan [Object] (6): {
                name (3): tan
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (6): tan(x)
                ]
                description (36): Compute the tangent of x in radians.
                examples [Array] (4): [
                    0 (8): tan(0.5)
                    1 (19): sin(0.5) / cos(0.5)
                    2 (11): tan(pi / 4)
                    3 (11): tan(45 deg)
                ]
                seealso [Array] (3): [
                    0 (4): atan
                    1 (3): sin
                    2 (3): cos
                ]
            }
            tanh [Object] (6): {
                name (4): tanh
                category (12): Trigonometry
                syntax [Array] (1): [
                    0 (7): tanh(x)
                ]
                description (47): Compute the hyperbolic tangent of x in radians.
                examples [Array] (2): [
                    0 (9): tanh(0.5)
                    1 (21): sinh(0.5) / cosh(0.5)
                ]
                seealso [Array] (2): [
                    0 (4): sinh
                    1 (4): cosh
                ]
            }
            to [Object] (6): {
                name (2): to
                category (5): Units
                syntax [Array] (2): [
                    0 (9): x to unit
                    1 (11): to(x, unit)
                ]
                description (27): Change the unit of a value.
                examples [Array] (3): [
                    0 (12): 5 inch to cm
                    1 (10): 3.2kg to g
                    2 (16): 16 bytes in bits
                ]
                seealso [Array] (0): []
            }
            clone [Object] (6): {
                name (5): clone
                category (5): Utils
                syntax [Array] (1): [
                    0 (8): clone(x)
                ]
                description (83): Clone a variable. Creates a copy of primitive variables,and a deep copy of matrices
                examples [Array] (5): [
                    0 (10): clone(3.5)
                    1 (13): clone(2 - 4i)
                    2 (13): clone(45 deg)
                    3 (19): clone([1, 2; 3, 4])
                    4 (20): clone("hello world")
                ]
                seealso [Array] (0): []
            }
            format [Object] (6): {
                name (6): format
                category (5): Utils
                syntax [Array] (2): [
                    0 (13): format(value)
                    1 (24): format(value, precision)
                ]
                description (37): Format a value of any type as string.
                examples [Array] (4): [
                    0 (11): format(2.3)
                    1 (14): format(3 - 4i)
                    2 (10): format([])
                    3 (13): format(pi, 3)
                ]
                seealso [Array] (1): [
                    0 (5): print
                ]
            }
            isNaN [Object] (6): {
                name (5): isNaN
                category (5): Utils
                syntax [Array] (1): [
                    0 (8): isNaN(x)
                ]
                description (42): Test whether a value is NaN (not a number)
                examples [Array] (4): [
                    0 (8): isNaN(2)
                    1 (12): isNaN(0 / 0)
                    2 (10): isNaN(NaN)
                    3 (15): isNaN(Infinity)
                ]
                seealso [Array] (4): [
                    0 (10): isNegative
                    1 (9): isNumeric
                    2 (10): isPositive
                    3 (6): isZero
                ]
            }
            isInteger [Object] (6): {
                name (9): isInteger
                category (5): Utils
                syntax [Array] (1): [
                    0 (12): isInteger(x)
                ]
                description (42): Test whether a value is an integer number.
                examples [Array] (3): [
                    0 (12): isInteger(2)
                    1 (14): isInteger(3.5)
                    2 (23): isInteger([3, 0.5, -2])
                ]
                seealso [Array] (4): [
                    0 (10): isNegative
                    1 (9): isNumeric
                    2 (10): isPositive
                    3 (6): isZero
                ]
            }
            isNegative [Object] (6): {
                name (10): isNegative
                category (5): Utils
                syntax [Array] (1): [
                    0 (13): isNegative(x)
                ]
                description (52): Test whether a value is negative: smaller than zero.
                examples [Array] (4): [
                    0 (13): isNegative(2)
                    1 (13): isNegative(0)
                    2 (14): isNegative(-4)
                    3 (24): isNegative([3, 0.5, -2])
                ]
                seealso [Array] (4): [
                    0 (9): isInteger
                    1 (9): isNumeric
                    2 (10): isPositive
                    3 (6): isZero
                ]
            }
            isNumeric [Object] (6): {
                name (9): isNumeric
                category (5): Utils
                syntax [Array] (1): [
                    0 (12): isNumeric(x)
                ]
                description (114): Test whether a value is a numeric value. Returns true when the input is a number, BigNumber, Fraction, or boolean.
                examples [Array] (8): [
                    0 (12): isNumeric(2)
                    1 (14): isNumeric("2")
                    2 (20): hasNumericValue("2")
                    3 (12): isNumeric(0)
                    4 (25): isNumeric(bignumber(500))
                    5 (26): isNumeric(fraction(0.125))
                    6 (17): isNumeric(2 + 3i)
                    7 (30): isNumeric([2.3, "foo", false])
                ]
                seealso [Array] (6): [
                    0 (9): isInteger
                    1 (6): isZero
                    2 (10): isNegative
                    3 (10): isPositive
                    4 (5): isNaN
                    5 (15): hasNumericValue
                ]
            }
            hasNumericValue [Object] (6): {
                name (15): hasNumericValue
                category (5): Utils
                syntax [Array] (1): [
                    0 (18): hasNumericValue(x)
                ]
                description (119): Test whether a value is an numeric value. In case of a string, true is returned if the string contains a numeric value.
                examples [Array] (8): [
                    0 (18): hasNumericValue(2)
                    1 (20): hasNumericValue("2")
                    2 (14): isNumeric("2")
                    3 (18): hasNumericValue(0)
                    4 (31): hasNumericValue(bignumber(500))
                    5 (32): hasNumericValue(fraction(0.125))
                    6 (23): hasNumericValue(2 + 3i)
                    7 (36): hasNumericValue([2.3, "foo", false])
                ]
                seealso [Array] (6): [
                    0 (9): isInteger
                    1 (6): isZero
                    2 (10): isNegative
                    3 (10): isPositive
                    4 (5): isNaN
                    5 (9): isNumeric
                ]
            }
            isPositive [Object] (6): {
                name (10): isPositive
                category (5): Utils
                syntax [Array] (1): [
                    0 (13): isPositive(x)
                ]
                description (51): Test whether a value is positive: larger than zero.
                examples [Array] (4): [
                    0 (13): isPositive(2)
                    1 (13): isPositive(0)
                    2 (14): isPositive(-4)
                    3 (24): isPositive([3, 0.5, -2])
                ]
                seealso [Array] (4): [
                    0 (9): isInteger
                    1 (9): isNumeric
                    2 (10): isNegative
                    3 (6): isZero
                ]
            }
            isPrime [Object] (6): {
                name (7): isPrime
                category (5): Utils
                syntax [Array] (1): [
                    0 (10): isPrime(x)
                ]
                description (73): Test whether a value is prime: has no divisors other than itself and one.
                examples [Array] (3): [
                    0 (10): isPrime(3)
                    1 (11): isPrime(-2)
                    2 (21): isPrime([2, 17, 100])
                ]
                seealso [Array] (4): [
                    0 (9): isInteger
                    1 (9): isNumeric
                    2 (10): isNegative
                    3 (6): isZero
                ]
            }
            isZero [Object] (6): {
                name (6): isZero
                category (5): Utils
                syntax [Array] (1): [
                    0 (9): isZero(x)
                ]
                description (29): Test whether a value is zero.
                examples [Array] (4): [
                    0 (9): isZero(2)
                    1 (9): isZero(0)
                    2 (10): isZero(-4)
                    3 (21): isZero([3, 0, -2, 0])
                ]
                seealso [Array] (4): [
                    0 (9): isInteger
                    1 (9): isNumeric
                    2 (10): isNegative
                    3 (10): isPositive
                ]
            }
            typeOf [Object] (6): {
                name (6): typeOf
                category (5): Utils
                syntax [Array] (1): [
                    0 (9): typeOf(x)
                ]
                description (27): Get the type of a variable.
                examples [Array] (4): [
                    0 (11): typeOf(3.5)
                    1 (14): typeOf(2 - 4i)
                    2 (14): typeOf(45 deg)
                    3 (21): typeOf("hello world")
                ]
                seealso [Array] (1): [
                    0 (17): getMatrixDataType
                ]
            }
            numeric [Object] (6): {
                name (7): numeric
                category (5): Utils
                syntax [Array] (1): [
                    0 (10): numeric(x)
                ]
                description (83): Convert a numeric input to a specific numeric type: number, BigNumber, or Fraction.
                examples [Array] (6): [
                    0 (12): numeric("4")
                    1 (22): numeric("4", "number")
                    2 (25): numeric("4", "BigNumber")
                    3 (23): numeric("4", "Fraction)
                    4 (22): numeric(4, "Fraction")
                    5 (32): numeric(fraction(2, 5), "number)
                ]
                seealso [Array] (5): [
                    0 (6): number
                    1 (8): fraction
                    2 (9): bignumber
                    3 (6): string
                    4 (6): format
                ]
            }
        }
        Node [Function] (5 lines): Node function Node() {
          if (!(this instanceof Node)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        }
        ArrayNode [Function] (11 lines): ArrayNode function ArrayNode(items) {
          if (!(this instanceof ArrayNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.items = items || []; // validate input
        
          if (!Array.isArray(this.items) || !this.items.every(_is.isNode)) {
            throw new TypeError('Array containing Nodes expected');
          }
        }
        BlockNode [Function] (18 lines): BlockNode function BlockNode(blocks) {
          if (!(this instanceof BlockNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate input, copy blocks
        
        
          if (!Array.isArray(blocks)) throw new Error('Array expected');
          this.blocks = blocks.map(function (block) {
            var node = block && block.node;
            var visible = block && block.visible !== undefined ? block.visible : true;
            if (!(0, _is.isNode)(node)) throw new TypeError('Property "node" must be a Node');
            if (typeof visible !== 'boolean') throw new TypeError('Property "visible" must be a boolean');
            return {
              node: node,
              visible: visible
            };
          });
        }
        ConstantNode [Function] (7 lines): ConstantNode function ConstantNode(value) {
          if (!(this instanceof ConstantNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.value = value;
        }
        ObjectNode [Function] (15 lines): ObjectNode function ObjectNode(properties) {
          if (!(this instanceof ObjectNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.properties = properties || {}; // validate input
        
          if (properties) {
            if (!(_typeof(properties) === 'object') || !Object.keys(properties).every(function (key) {
              return (0, _is.isNode)(properties[key]);
            })) {
              throw new TypeError('Object containing Nodes expected');
            }
          }
        }
        ParenthesisNode [Function] (12 lines): ParenthesisNode function ParenthesisNode(content) {
          if (!(this instanceof ParenthesisNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate input
        
        
          if (!(0, _is.isNode)(content)) {
            throw new TypeError('Node expected for parameter "content"');
          }
        
          this.content = content;
        }
        RelationalNode [Function] (11 lines): RelationalNode function RelationalNode(conditionals, params) {
          if (!(this instanceof RelationalNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (!Array.isArray(conditionals)) throw new TypeError('Parameter conditionals must be an array');
          if (!Array.isArray(params)) throw new TypeError('Parameter params must be an array');
          if (conditionals.length !== params.length - 1) throw new TypeError('Parameter params must contain exactly one more element than parameter conditionals');
          this.conditionals = conditionals;
          this.params = params;
        }
        Chain [Function] (11 lines): Chain function Chain(value) {
          if (!(this instanceof Chain)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if ((0, _is.isChain)(value)) {
            this.value = value.value;
          } else {
            this.value = value;
          }
        }
        reviver [Function] (9 lines): reviver function reviver(key, value) {
          var constructor = classes[value && value.mathjs];
        
          if (constructor && typeof constructor.fromJSON === 'function') {
            return constructor.fromJSON(value);
          }
        
          return value;
        }
        ConditionalNode [Function] (12 lines): ConditionalNode function ConditionalNode(condition, trueExpr, falseExpr) {
          if (!(this instanceof ConditionalNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (!(0, _is.isNode)(condition)) throw new TypeError('Parameter condition must be a Node');
          if (!(0, _is.isNode)(trueExpr)) throw new TypeError('Parameter trueExpr must be a Node');
          if (!(0, _is.isNode)(falseExpr)) throw new TypeError('Parameter falseExpr must be a Node');
          this.condition = condition;
          this.trueExpr = trueExpr;
          this.falseExpr = falseExpr;
        }
        OperatorNode [Function] (23 lines): OperatorNode function OperatorNode(op, fn, args, implicit) {
          if (!(this instanceof OperatorNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate input
        
        
          if (typeof op !== 'string') {
            throw new TypeError('string expected for parameter "op"');
          }
        
          if (typeof fn !== 'string') {
            throw new TypeError('string expected for parameter "fn"');
          }
        
          if (!Array.isArray(args) || !args.every(_is.isNode)) {
            throw new TypeError('Array containing Nodes expected for parameter "args"');
          }
        
          this.implicit = implicit === true;
          this.op = op;
          this.fn = fn;
          this.args = args || [];
        }
        RangeNode [Function] (16 lines): RangeNode function RangeNode(start, end, step) {
          if (!(this instanceof RangeNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate inputs
        
        
          if (!(0, _is.isNode)(start)) throw new TypeError('Node expected');
          if (!(0, _is.isNode)(end)) throw new TypeError('Node expected');
          if (step && !(0, _is.isNode)(step)) throw new TypeError('Node expected');
          if (arguments.length > 3) throw new Error('Too many arguments');
          this.start = start; // included lower-bound
        
          this.end = end; // included upper-bound
        
          this.step = step || null; // optional step
        }
        FunctionAssignmentNode [Function] (19 lines): FunctionAssignmentNode function FunctionAssignmentNode(name, params, expr) {
          if (!(this instanceof FunctionAssignmentNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate input
        
        
          if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
          if (!Array.isArray(params)) throw new TypeError('Array containing strings or objects expected for parameter "params"');
          if (!(0, _is.isNode)(expr)) throw new TypeError('Node expected for parameter "expr"');
          if (name in _keywords.keywords) throw new Error('Illegal function name, "' + name + '" is a reserved keyword');
          this.name = name;
          this.params = params.map(function (param) {
            return param && param.name || param;
          });
          this.types = params.map(function (param) {
            return param && param.type || 'any';
          });
          this.expr = expr;
        }
        chain [Function] (12 lines): chain function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        AccessorNode [Function] (29 lines): AccessorNode function AccessorNode(object, index) {
          if (!(this instanceof AccessorNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (!(0, _is.isNode)(object)) {
            throw new TypeError('Node expected for parameter "object"');
          }
        
          if (!(0, _is.isIndexNode)(index)) {
            throw new TypeError('IndexNode expected for parameter "index"');
          }
        
          this.object = object || null;
          this.index = index; // readonly property name
        
          Object.defineProperty(this, 'name', {
            get: function () {
              if (this.index) {
                return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
              } else {
                return this.object.name || '';
              }
            }.bind(this),
            set: function set() {
              throw new Error('Cannot assign a new name, name is read-only');
            }
          });
        }
        IndexNode [Function] (16 lines): IndexNode function IndexNode(dimensions, dotNotation) {
          if (!(this instanceof IndexNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.dimensions = dimensions;
          this.dotNotation = dotNotation || false; // validate input
        
          if (!Array.isArray(dimensions) || !dimensions.every(_is.isNode)) {
            throw new TypeError('Array containing Nodes expected for parameter "dimensions"');
          }
        
          if (this.dotNotation && !this.isObjectProperty()) {
            throw new Error('dotNotation only applicable for object properties');
          }
        }
        SymbolNode [Function] (9 lines): SymbolNode function SymbolNode(name) {
          if (!(this instanceof SymbolNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          } // validate input
        
        
          if (typeof name !== 'string') throw new TypeError('String expected for parameter "name"');
          this.name = name;
        }
        AssignmentNode [Function] (40 lines): AssignmentNode function AssignmentNode(object, index, value) {
          if (!(this instanceof AssignmentNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.object = object;
          this.index = value ? index : null;
          this.value = value || index; // validate input
        
          if (!(0, _is.isSymbolNode)(object) && !(0, _is.isAccessorNode)(object)) {
            throw new TypeError('SymbolNode or AccessorNode expected as "object"');
          }
        
          if ((0, _is.isSymbolNode)(object) && object.name === 'end') {
            throw new Error('Cannot assign to symbol "end"');
          }
        
          if (this.index && !(0, _is.isIndexNode)(this.index)) {
            // index is optional
            throw new TypeError('IndexNode expected as "index"');
          }
        
          if (!(0, _is.isNode)(this.value)) {
            throw new TypeError('Node expected as "value"');
          } // readonly property name
        
        
          Object.defineProperty(this, 'name', {
            get: function () {
              if (this.index) {
                return this.index.isObjectProperty() ? this.index.getObjectProperty() : '';
              } else {
                return this.object.name || '';
              }
            }.bind(this),
            set: function set() {
              throw new Error('Cannot assign a new name, name is read-only');
            }
          });
        }
        FunctionNode [Function] (28 lines): FunctionNode function FunctionNode(fn, args) {
          if (!(this instanceof FunctionNode)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (typeof fn === 'string') {
            fn = new SymbolNode(fn);
          } // validate input
        
        
          if (!(0, _is.isNode)(fn)) throw new TypeError('Node expected as parameter "fn"');
        
          if (!Array.isArray(args) || !args.every(_is.isNode)) {
            throw new TypeError('Array containing Nodes expected for parameter "args"');
          }
        
          this.fn = fn;
          this.args = args || []; // readonly property name
        
          Object.defineProperty(this, 'name', {
            get: function () {
              return this.fn.name || '';
            }.bind(this),
            set: function set() {
              throw new Error('Cannot assign a new name, name is read-only');
            }
          });
        }
        parse [Function] (12 lines): parse function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        evaluate [Function] (12 lines): evaluate function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        Help [Function] (8 lines): Help function Help(doc) {
          if (!(this instanceof Help)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          if (!doc) throw new Error('Argument "doc" missing');
          this.doc = doc;
        }
        compile [Function] (12 lines): compile function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        help [Function] (12 lines): help function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        simplify [Function] (12 lines): simplify function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        rationalize [Function] (12 lines): rationalize function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        Parser [Function] (7 lines): Parser function Parser() {
          if (!(this instanceof Parser)) {
            throw new SyntaxError('Constructor must be called with the new operator');
          }
        
          this.scope = {};
        }
        parser [Function] (12 lines): parser function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        derivative [Function] (12 lines): derivative function fn(arg0, arg1) {
          'use strict';
        
          if (arguments.length === len0 && test00(arg0) && test01(arg1)) { return fn0.apply(fn, arguments); }
          if (arguments.length === len1 && test10(arg0) && test11(arg1)) { return fn1.apply(fn, arguments); }
          if (arguments.length === len2 && test20(arg0) && test21(arg1)) { return fn2.apply(fn, arguments); }
          if (arguments.length === len3 && test30(arg0) && test31(arg1)) { return fn3.apply(fn, arguments); }
          if (arguments.length === len4 && test40(arg0) && test41(arg1)) { return fn4.apply(fn, arguments); }
          if (arguments.length === len5 && test50(arg0) && test51(arg1)) { return fn5.apply(fn, arguments); }
        
          return generic.apply(fn, arguments);
        }
        isAccessorNode [Function] (3 lines): isAccessorNode function isAccessorNode(x) {
          return x && x.isAccessorNode === true && x.constructor.prototype.isNode === true || false;
        }
        isArray [Function] (1 lines): isArray function isArray() { [native code] }
        isArrayNode [Function] (3 lines): isArrayNode function isArrayNode(x) {
          return x && x.isArrayNode === true && x.constructor.prototype.isNode === true || false;
        }
        isAssignmentNode [Function] (3 lines): isAssignmentNode function isAssignmentNode(x) {
          return x && x.isAssignmentNode === true && x.constructor.prototype.isNode === true || false;
        }
        isBigNumber [Function] (3 lines): isBigNumber function isBigNumber(x) {
          return x && x.constructor.prototype.isBigNumber === true || false;
        }
        isBlockNode [Function] (3 lines): isBlockNode function isBlockNode(x) {
          return x && x.isBlockNode === true && x.constructor.prototype.isNode === true || false;
        }
        isBoolean [Function] (3 lines): isBoolean function isBoolean(x) {
          return typeof x === 'boolean';
        }
        isChain [Function] (3 lines): isChain function isChain(x) {
          return x && x.constructor.prototype.isChain === true || false;
        }
        isCollection [Function] (3 lines): isCollection function isCollection(x) {
          return Array.isArray(x) || isMatrix(x);
        }
        isComplex [Function] (3 lines): isComplex function isComplex(x) {
          return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isComplex === true || false;
        }
        isConditionalNode [Function] (3 lines): isConditionalNode function isConditionalNode(x) {
          return x && x.isConditionalNode === true && x.constructor.prototype.isNode === true || false;
        }
        isConstantNode [Function] (3 lines): isConstantNode function isConstantNode(x) {
          return x && x.isConstantNode === true && x.constructor.prototype.isNode === true || false;
        }
        isDate [Function] (3 lines): isDate function isDate(x) {
          return x instanceof Date;
        }
        isDenseMatrix [Function] (3 lines): isDenseMatrix function isDenseMatrix(x) {
          return x && x.isDenseMatrix && x.constructor.prototype.isMatrix === true || false;
        }
        isFraction [Function] (3 lines): isFraction function isFraction(x) {
          return x && _typeof(x) === 'object' && Object.getPrototypeOf(x).isFraction === true || false;
        }
        isFunction [Function] (3 lines): isFunction function isFunction(x) {
          return typeof x === 'function';
        }
        isFunctionAssignmentNode [Function] (3 lines): isFunctionAssignmentNode function isFunctionAssignmentNode(x) {
          return x && x.isFunctionAssignmentNode === true && x.constructor.prototype.isNode === true || false;
        }
        isFunctionNode [Function] (3 lines): isFunctionNode function isFunctionNode(x) {
          return x && x.isFunctionNode === true && x.constructor.prototype.isNode === true || false;
        }
        isHelp [Function] (3 lines): isHelp function isHelp(x) {
          return x && x.constructor.prototype.isHelp === true || false;
        }
        isIndex [Function] (3 lines): isIndex function isIndex(x) {
          return x && x.constructor.prototype.isIndex === true || false;
        }
        isIndexNode [Function] (3 lines): isIndexNode function isIndexNode(x) {
          return x && x.isIndexNode === true && x.constructor.prototype.isNode === true || false;
        }
        isMatrix [Function] (3 lines): isMatrix function isMatrix(x) {
          return x && x.constructor.prototype.isMatrix === true || false;
        }
        isNode [Function] (3 lines): isNode function isNode(x) {
          return x && x.isNode === true && x.constructor.prototype.isNode === true || false;
        }
        isNull [Function] (3 lines): isNull function isNull(x) {
          return x === null;
        }
        isNumber [Function] (3 lines): isNumber function isNumber(x) {
          return typeof x === 'number';
        }
        isString [Function] (3 lines): isString function isString(x) {
          return typeof x === 'string';
        }
        isUndefined [Function] (3 lines): isUndefined function isUndefined(x) {
          return x === undefined;
        }
        isObject [Function] (3 lines): isObject function isObject(x) {
          return !!(x && _typeof(x) === 'object' && x.constructor === Object && !isComplex(x) && !isFraction(x));
        }
        isObjectNode [Function] (3 lines): isObjectNode function isObjectNode(x) {
          return x && x.isObjectNode === true && x.constructor.prototype.isNode === true || false;
        }
        isOperatorNode [Function] (3 lines): isOperatorNode function isOperatorNode(x) {
          return x && x.isOperatorNode === true && x.constructor.prototype.isNode === true || false;
        }
        isParenthesisNode [Function] (3 lines): isParenthesisNode function isParenthesisNode(x) {
          return x && x.isParenthesisNode === true && x.constructor.prototype.isNode === true || false;
        }
        isRange [Function] (3 lines): isRange function isRange(x) {
          return x && x.constructor.prototype.isRange === true || false;
        }
        isRangeNode [Function] (3 lines): isRangeNode function isRangeNode(x) {
          return x && x.isRangeNode === true && x.constructor.prototype.isNode === true || false;
        }
        isRegExp [Function] (3 lines): isRegExp function isRegExp(x) {
          return x instanceof RegExp;
        }
        isResultSet [Function] (3 lines): isResultSet function isResultSet(x) {
          return x && x.constructor.prototype.isResultSet === true || false;
        }
        isSparseMatrix [Function] (3 lines): isSparseMatrix function isSparseMatrix(x) {
          return x && x.isSparseMatrix && x.constructor.prototype.isMatrix === true || false;
        }
        isSymbolNode [Function] (3 lines): isSymbolNode function isSymbolNode(x) {
          return x && x.isSymbolNode === true && x.constructor.prototype.isNode === true || false;
        }
        isUnit [Function] (3 lines): isUnit function isUnit(x) {
          return x && x.constructor.prototype.isUnit === true || false;
        }
        typedDependencies [Object] (5): {
            BigNumberDependencies [Object] (1): {
                createBigNumberClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            ComplexDependencies [Object] (1): {
                createComplexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            DenseMatrixDependencies [Object] (2): {
                MatrixDependencies [Object] (1): {
                    createMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                createDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            FractionDependencies [Object] (1): {
                createFractionClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            createTyped [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ResultSetDependencies [Object] (1): {
            createResultSet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        BigNumberDependencies: <circular value object>
        ComplexDependencies: <circular value object>
        FractionDependencies: <circular value object>
        RangeDependencies [Object] (1): {
            createRangeClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        MatrixDependencies: <circular value object>
        DenseMatrixDependencies: <circular value object>
        cloneDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createClone [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isIntegerDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsInteger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isNegativeDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsNegative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isNumericDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        hasNumericValueDependencies [Object] (3): {
            isNumericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createHasNumericValue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isPositiveDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsPositive [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isZeroDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsZero [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isNaNDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        typeOfDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createTypeOf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        equalScalarDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createEqualScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        SparseMatrixDependencies [Object] (4): {
            MatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSparseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        numberDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createNumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        stringDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createString [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        booleanDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createBoolean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bignumberDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createBignumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        complexDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createComplex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        fractionDependencies [Object] (3): {
            FractionDependencies: <circular value object>
            typedDependencies: <circular value object>
            createFraction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        matrixDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            MatrixDependencies: <circular value object>
            SparseMatrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMatrix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        splitUnitDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createSplitUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        unaryMinusDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createUnaryMinus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        unaryPlusDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createUnaryPlus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        absDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createAbs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        applyDependencies [Object] (3): {
            isIntegerDependencies: <circular value object>
            typedDependencies: <circular value object>
            createApply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        addScalarDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createAddScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cbrtDependencies [Object] (8): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            FractionDependencies: <circular value object>
            isNegativeDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createCbrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ceilDependencies [Object] (3): {
            roundDependencies [Object] (7): {
                BigNumberDependencies: <circular value object>
                DenseMatrixDependencies: <circular value object>
                equalScalarDependencies: <circular value object>
                matrixDependencies: <circular value object>
                typedDependencies: <circular value object>
                zerosDependencies [Object] (4): {
                    BigNumberDependencies: <circular value object>
                    matrixDependencies: <circular value object>
                    typedDependencies: <circular value object>
                    createZeros [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                createRound [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            typedDependencies: <circular value object>
            createCeil [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cubeDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createCube [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        expDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createExp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        expm1Dependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createExpm1 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        fixDependencies [Object] (5): {
            ComplexDependencies: <circular value object>
            ceilDependencies: <circular value object>
            floorDependencies [Object] (3): {
                roundDependencies: <circular value object>
                typedDependencies: <circular value object>
                createFloor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            typedDependencies: <circular value object>
            createFix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        floorDependencies: <circular value object>
        gcdDependencies [Object] (6): {
            BigNumberDependencies: <circular value object>
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createGcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        lcmDependencies [Object] (4): {
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLcm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        log10Dependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLog10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        log2Dependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLog2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        modDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMod [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        multiplyScalarDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createMultiplyScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        multiplyDependencies [Object] (7): {
            addScalarDependencies: <circular value object>
            dotDependencies [Object] (6): {
                addScalarDependencies: <circular value object>
                conjDependencies [Object] (2): {
                    typedDependencies: <circular value object>
                    createConj [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                multiplyScalarDependencies: <circular value object>
                sizeDependencies [Object] (3): {
                    matrixDependencies: <circular value object>
                    typedDependencies: <circular value object>
                    createSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                typedDependencies: <circular value object>
                createDot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        nthRootDependencies [Object] (5): {
            BigNumberDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createNthRoot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        signDependencies [Object] (5): {
            BigNumberDependencies: <circular value object>
            FractionDependencies: <circular value object>
            complexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSign [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sqrtDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSqrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        squareDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createSquare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        subtractDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createSubtract [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        xgcdDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createXgcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        dotMultiplyDependencies [Object] (5): {
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDotMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bitAndDependencies [Object] (4): {
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createBitAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bitNotDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createBitNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bitOrDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createBitOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bitXorDependencies [Object] (4): {
            DenseMatrixDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createBitXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        argDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createArg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        conjDependencies: <circular value object>
        imDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        reDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createRe [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        notDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        orDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        xorDependencies [Object] (4): {
            DenseMatrixDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        concatDependencies [Object] (4): {
            isIntegerDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createConcat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        columnDependencies [Object] (5): {
            IndexDependencies [Object] (2): {
                ImmutableDenseMatrixDependencies [Object] (3): {
                    DenseMatrixDependencies: <circular value object>
                    smallerDependencies [Object] (4): {
                        DenseMatrixDependencies: <circular value object>
                        matrixDependencies: <circular value object>
                        typedDependencies: <circular value object>
                        createSmaller [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                          // we only pass the requested dependencies to the factory function
                          // to prevent functions to rely on dependencies that are not explicitly
                          // requested.
                          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                          assertDependencies(name, dependencies, scope);
                          return create(deps);
                        }
                    }
                    createImmutableDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                createIndexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            matrixDependencies: <circular value object>
            rangeDependencies [Object] (8): {
                bignumberDependencies: <circular value object>
                matrixDependencies: <circular value object>
                largerDependencies [Object] (4): {
                    DenseMatrixDependencies: <circular value object>
                    matrixDependencies: <circular value object>
                    typedDependencies: <circular value object>
                    createLarger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                largerEqDependencies [Object] (4): {
                    DenseMatrixDependencies: <circular value object>
                    matrixDependencies: <circular value object>
                    typedDependencies: <circular value object>
                    createLargerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                smallerDependencies: <circular value object>
                smallerEqDependencies [Object] (4): {
                    DenseMatrixDependencies: <circular value object>
                    matrixDependencies: <circular value object>
                    typedDependencies: <circular value object>
                    createSmallerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                      // we only pass the requested dependencies to the factory function
                      // to prevent functions to rely on dependencies that are not explicitly
                      // requested.
                      var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                      assertDependencies(name, dependencies, scope);
                      return create(deps);
                    }
                }
                typedDependencies: <circular value object>
                createRange [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            typedDependencies: <circular value object>
            createColumn [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        crossDependencies [Object] (5): {
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCross [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        diagDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            SparseMatrixDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDiag [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        filterDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createFilter [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        flattenDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createFlatten [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        forEachDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createForEach [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        getMatrixDataTypeDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createGetMatrixDataType [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        identityDependencies [Object] (6): {
            BigNumberDependencies: <circular value object>
            DenseMatrixDependencies: <circular value object>
            SparseMatrixDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createIdentity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        kronDependencies [Object] (4): {
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createKron [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        mapDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createMap [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        onesDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createOnes [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rangeDependencies: <circular value object>
        reshapeDependencies [Object] (4): {
            isIntegerDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createReshape [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        resizeDependencies [Object] (2): {
            matrixDependencies: <circular value object>
            createResize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rowDependencies [Object] (5): {
            IndexDependencies: <circular value object>
            matrixDependencies: <circular value object>
            rangeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createRow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sizeDependencies: <circular value object>
        squeezeDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSqueeze [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        subsetDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        transposeDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createTranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ctransposeDependencies [Object] (4): {
            conjDependencies: <circular value object>
            transposeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCtranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        zerosDependencies: <circular value object>
        erfDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createErf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        modeDependencies [Object] (4): {
            isNaNDependencies: <circular value object>
            isNumericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        prodDependencies [Object] (4): {
            multiplyScalarDependencies: <circular value object>
            numericDependencies [Object] (4): {
                bignumberDependencies: <circular value object>
                fractionDependencies: <circular value object>
                numberDependencies: <circular value object>
                createNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
                  // we only pass the requested dependencies to the factory function
                  // to prevent functions to rely on dependencies that are not explicitly
                  // requested.
                  var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
                  assertDependencies(name, dependencies, scope);
                  return create(deps);
                }
            }
            typedDependencies: <circular value object>
            createProd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        formatDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createFormat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        printDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createPrint [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        toDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createTo [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        isPrimeDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createIsPrime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        numericDependencies: <circular value object>
        divideScalarDependencies [Object] (3): {
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDivideScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        powDependencies [Object] (8): {
            ComplexDependencies: <circular value object>
            fractionDependencies: <circular value object>
            identityDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            numberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        roundDependencies: <circular value object>
        logDependencies [Object] (4): {
            ComplexDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLog [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        log1pDependencies [Object] (5): {
            ComplexDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            logDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLog1p [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        nthRootsDependencies [Object] (4): {
            ComplexDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createNthRoots [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        dotPowDependencies [Object] (6): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            powDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDotPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        dotDivideDependencies [Object] (6): {
            DenseMatrixDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDotDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        lsolveDependencies [Object] (8): {
            DenseMatrixDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createLsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        usolveDependencies [Object] (8): {
            DenseMatrixDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createUsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        leftShiftDependencies [Object] (6): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            zerosDependencies: <circular value object>
            createLeftShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rightArithShiftDependencies [Object] (6): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            zerosDependencies: <circular value object>
            createRightArithShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rightLogShiftDependencies [Object] (6): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            zerosDependencies: <circular value object>
            createRightLogShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        andDependencies [Object] (6): {
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            notDependencies: <circular value object>
            typedDependencies: <circular value object>
            zerosDependencies: <circular value object>
            createAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        compareDependencies [Object] (7): {
            BigNumberDependencies: <circular value object>
            DenseMatrixDependencies: <circular value object>
            FractionDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCompare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        compareNaturalDependencies [Object] (3): {
            compareDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCompareNatural [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        compareTextDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCompareText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        equalDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        equalTextDependencies [Object] (4): {
            compareTextDependencies: <circular value object>
            isZeroDependencies: <circular value object>
            typedDependencies: <circular value object>
            createEqualText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        smallerDependencies: <circular value object>
        smallerEqDependencies: <circular value object>
        largerDependencies: <circular value object>
        largerEqDependencies: <circular value object>
        deepEqualDependencies [Object] (3): {
            equalDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDeepEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        unequalDependencies [Object] (5): {
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createUnequal [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        partitionSelectDependencies [Object] (5): {
            compareDependencies: <circular value object>
            isNaNDependencies: <circular value object>
            isNumericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createPartitionSelect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sortDependencies [Object] (5): {
            compareDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSort [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        maxDependencies [Object] (4): {
            largerDependencies: <circular value object>
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMax [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        minDependencies [Object] (4): {
            numericDependencies: <circular value object>
            smallerDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ImmutableDenseMatrixDependencies: <circular value object>
        IndexDependencies: <circular value object>
        FibonacciHeapDependencies [Object] (3): {
            largerDependencies: <circular value object>
            smallerDependencies: <circular value object>
            createFibonacciHeapClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        SpaDependencies [Object] (4): {
            FibonacciHeapDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            createSpaClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        UnitDependencies [Object] (16): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            FractionDependencies: <circular value object>
            absDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalDependencies: <circular value object>
            fixDependencies: <circular value object>
            formatDependencies: <circular value object>
            isNumericDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            numberDependencies: <circular value object>
            powDependencies: <circular value object>
            roundDependencies: <circular value object>
            subtractDependencies: <circular value object>
            createUnitClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        unitDependencies [Object] (3): {
            UnitDependencies: <circular value object>
            typedDependencies: <circular value object>
            createUnitFunction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sparseDependencies [Object] (3): {
            SparseMatrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSparse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        createUnitDependencies [Object] (3): {
            UnitDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCreateUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acosDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acoshDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acotDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acothDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acscDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        acschDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAcsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        asecDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAsec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        asechDependencies [Object] (4): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAsech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        asinDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAsin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        asinhDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createAsinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        atanDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createAtan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        atan2Dependencies [Object] (6): {
            BigNumberDependencies: <circular value object>
            DenseMatrixDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAtan2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        atanhDependencies [Object] (3): {
            ComplexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAtanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cosDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createCos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        coshDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createCosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cotDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cothDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cscDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        cschDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        secDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sechDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sinDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createSin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sinhDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createSinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        tanDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createTan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        tanhDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createTanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setCartesianDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetCartesian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setDifferenceDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setDistinctDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetDistinct [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setIntersectDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setIsSubsetDependencies [Object] (6): {
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetIsSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setMultiplicityDependencies [Object] (6): {
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetMultiplicity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setPowersetDependencies [Object] (6): {
            IndexDependencies: <circular value object>
            compareNaturalDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetPowerset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setSizeDependencies [Object] (3): {
            compareNaturalDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setSymDifferenceDependencies [Object] (7): {
            IndexDependencies: <circular value object>
            concatDependencies: <circular value object>
            setDifferenceDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetSymDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        setUnionDependencies [Object] (8): {
            IndexDependencies: <circular value object>
            concatDependencies: <circular value object>
            setIntersectDependencies: <circular value object>
            setSymDifferenceDependencies: <circular value object>
            sizeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSetUnion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        addDependencies [Object] (7): {
            DenseMatrixDependencies: <circular value object>
            SparseMatrixDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createAdd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        hypotDependencies [Object] (9): {
            absDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            isPositiveDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            smallerDependencies: <circular value object>
            sqrtDependencies: <circular value object>
            typedDependencies: <circular value object>
            createHypot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        normDependencies [Object] (12): {
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            conjDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            largerDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            powDependencies: <circular value object>
            smallerDependencies: <circular value object>
            sqrtDependencies: <circular value object>
            typedDependencies: <circular value object>
            createNorm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        dotDependencies: <circular value object>
        traceDependencies [Object] (4): {
            addDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createTrace [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        indexDependencies [Object] (3): {
            IndexDependencies: <circular value object>
            typedDependencies: <circular value object>
            createIndex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        NodeDependencies [Object] (1): {
            createNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        AccessorNodeDependencies [Object] (3): {
            NodeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            createAccessorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ArrayNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createArrayNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        AssignmentNodeDependencies [Object] (4): {
            matrixDependencies: <circular value object>
            NodeDependencies: <circular value object>
            subsetDependencies: <circular value object>
            createAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        BlockNodeDependencies [Object] (3): {
            NodeDependencies: <circular value object>
            ResultSetDependencies: <circular value object>
            createBlockNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ConditionalNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createConditionalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ConstantNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createConstantNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        FunctionAssignmentNodeDependencies [Object] (3): {
            NodeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createFunctionAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        IndexNodeDependencies [Object] (4): {
            NodeDependencies: <circular value object>
            RangeDependencies: <circular value object>
            sizeDependencies: <circular value object>
            createIndexNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ObjectNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createObjectNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        OperatorNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createOperatorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ParenthesisNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createParenthesisNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        RangeNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createRangeNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        RelationalNodeDependencies [Object] (2): {
            NodeDependencies: <circular value object>
            createRelationalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        SymbolNodeDependencies [Object] (3): {
            UnitDependencies: <circular value object>
            NodeDependencies: <circular value object>
            createSymbolNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        FunctionNodeDependencies [Object] (3): {
            NodeDependencies: <circular value object>
            SymbolNodeDependencies: <circular value object>
            createFunctionNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        parseDependencies [Object] (18): {
            AccessorNodeDependencies: <circular value object>
            ArrayNodeDependencies: <circular value object>
            AssignmentNodeDependencies: <circular value object>
            BlockNodeDependencies: <circular value object>
            ConditionalNodeDependencies: <circular value object>
            ConstantNodeDependencies: <circular value object>
            FunctionAssignmentNodeDependencies: <circular value object>
            FunctionNodeDependencies: <circular value object>
            IndexNodeDependencies: <circular value object>
            ObjectNodeDependencies: <circular value object>
            OperatorNodeDependencies: <circular value object>
            ParenthesisNodeDependencies: <circular value object>
            RangeNodeDependencies: <circular value object>
            RelationalNodeDependencies: <circular value object>
            SymbolNodeDependencies: <circular value object>
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createParse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        compileDependencies [Object] (3): {
            parseDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCompile [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        evaluateDependencies [Object] (3): {
            parseDependencies: <circular value object>
            typedDependencies: <circular value object>
            createEvaluate [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ParserDependencies [Object] (2): {
            parseDependencies: <circular value object>
            createParserClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        parserDependencies [Object] (3): {
            ParserDependencies: <circular value object>
            typedDependencies: <circular value object>
            createParser [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        lupDependencies [Object] (14): {
            DenseMatrixDependencies: <circular value object>
            SpaDependencies: <circular value object>
            SparseMatrixDependencies: <circular value object>
            absDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            largerDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createLup [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        qrDependencies [Object] (16): {
            addScalarDependencies: <circular value object>
            complexDependencies: <circular value object>
            conjDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalDependencies: <circular value object>
            identityDependencies: <circular value object>
            isZeroDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            signDependencies: <circular value object>
            sqrtDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            zerosDependencies: <circular value object>
            createQr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sluDependencies [Object] (11): {
            SparseMatrixDependencies: <circular value object>
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            largerDependencies: <circular value object>
            largerEqDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            transposeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSlu [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        lusolveDependencies [Object] (8): {
            DenseMatrixDependencies: <circular value object>
            lsolveDependencies: <circular value object>
            lupDependencies: <circular value object>
            matrixDependencies: <circular value object>
            sluDependencies: <circular value object>
            typedDependencies: <circular value object>
            usolveDependencies: <circular value object>
            createLusolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        HelpDependencies [Object] (2): {
            parseDependencies: <circular value object>
            createHelpClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        ChainDependencies [Object] (1): {
            createChainClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        helpDependencies [Object] (3): {
            HelpDependencies: <circular value object>
            typedDependencies: <circular value object>
            createHelp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        chainDependencies [Object] (3): {
            ChainDependencies: <circular value object>
            typedDependencies: <circular value object>
            createChain [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        detDependencies [Object] (7): {
            lupDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createDet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        invDependencies [Object] (10): {
            absDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            detDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            identityDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createInv [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        eigsDependencies [Object] (15): {
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            atanDependencies: <circular value object>
            bignumberDependencies: <circular value object>
            cosDependencies: <circular value object>
            equalDependencies: <circular value object>
            invDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            sinDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createEigs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        expmDependencies [Object] (7): {
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            identityDependencies: <circular value object>
            invDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            typedDependencies: <circular value object>
            createExpm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sqrtmDependencies [Object] (11): {
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            identityDependencies: <circular value object>
            invDependencies: <circular value object>
            maxDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            sizeDependencies: <circular value object>
            sqrtDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSqrtm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        divideDependencies [Object] (7): {
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            invDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        distanceDependencies [Object] (9): {
            absDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            sqrtDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            unaryMinusDependencies: <circular value object>
            createDistance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        intersectDependencies [Object] (12): {
            absDependencies: <circular value object>
            addDependencies: <circular value object>
            addScalarDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            equalScalarDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            smallerDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sumDependencies [Object] (4): {
            addDependencies: <circular value object>
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        meanDependencies [Object] (4): {
            addDependencies: <circular value object>
            divideDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        medianDependencies [Object] (6): {
            addDependencies: <circular value object>
            compareDependencies: <circular value object>
            divideDependencies: <circular value object>
            partitionSelectDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMedian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        madDependencies [Object] (6): {
            absDependencies: <circular value object>
            mapDependencies: <circular value object>
            medianDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMad [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        varianceDependencies [Object] (8): {
            addDependencies: <circular value object>
            applyDependencies: <circular value object>
            divideDependencies: <circular value object>
            isNaNDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createVariance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        quantileSeqDependencies [Object] (6): {
            addDependencies: <circular value object>
            compareDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            partitionSelectDependencies: <circular value object>
            typedDependencies: <circular value object>
            createQuantileSeq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        stdDependencies [Object] (4): {
            sqrtDependencies: <circular value object>
            typedDependencies: <circular value object>
            varianceDependencies: <circular value object>
            createStd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        combinationsDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createCombinations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        combinationsWithRepDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createCombinationsWithRep [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        gammaDependencies [Object] (6): {
            BigNumberDependencies: <circular value object>
            ComplexDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            powDependencies: <circular value object>
            typedDependencies: <circular value object>
            createGamma [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        factorialDependencies [Object] (3): {
            gammaDependencies: <circular value object>
            typedDependencies: <circular value object>
            createFactorial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        kldivergenceDependencies [Object] (9): {
            divideDependencies: <circular value object>
            dotDivideDependencies: <circular value object>
            isNumericDependencies: <circular value object>
            logDependencies: <circular value object>
            matrixDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            sumDependencies: <circular value object>
            typedDependencies: <circular value object>
            createKldivergence [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        multinomialDependencies [Object] (8): {
            addDependencies: <circular value object>
            divideDependencies: <circular value object>
            factorialDependencies: <circular value object>
            isIntegerDependencies: <circular value object>
            isPositiveDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMultinomial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        permutationsDependencies [Object] (3): {
            factorialDependencies: <circular value object>
            typedDependencies: <circular value object>
            createPermutations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        pickRandomDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createPickRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        randomDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        randomIntDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createRandomInt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        stirlingS2Dependencies [Object] (12): {
            addScalarDependencies: <circular value object>
            combinationsDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            factorialDependencies: <circular value object>
            isIntegerDependencies: <circular value object>
            isNegativeDependencies: <circular value object>
            largerDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            powDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createStirlingS2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bellNumbersDependencies [Object] (6): {
            addScalarDependencies: <circular value object>
            isIntegerDependencies: <circular value object>
            isNegativeDependencies: <circular value object>
            stirlingS2Dependencies: <circular value object>
            typedDependencies: <circular value object>
            createBellNumbers [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        catalanDependencies [Object] (8): {
            addScalarDependencies: <circular value object>
            combinationsDependencies: <circular value object>
            divideScalarDependencies: <circular value object>
            isIntegerDependencies: <circular value object>
            isNegativeDependencies: <circular value object>
            multiplyScalarDependencies: <circular value object>
            typedDependencies: <circular value object>
            createCatalan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        compositionDependencies [Object] (8): {
            addScalarDependencies: <circular value object>
            combinationsDependencies: <circular value object>
            isIntegerDependencies: <circular value object>
            isNegativeDependencies: <circular value object>
            isPositiveDependencies: <circular value object>
            largerDependencies: <circular value object>
            typedDependencies: <circular value object>
            createComposition [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        simplifyDependencies [Object] (17): {
            bignumberDependencies: <circular value object>
            fractionDependencies: <circular value object>
            ConstantNodeDependencies: <circular value object>
            FunctionNodeDependencies: <circular value object>
            OperatorNodeDependencies: <circular value object>
            ParenthesisNodeDependencies: <circular value object>
            SymbolNodeDependencies: <circular value object>
            addDependencies: <circular value object>
            divideDependencies: <circular value object>
            equalDependencies: <circular value object>
            isZeroDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            parseDependencies: <circular value object>
            powDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSimplify [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        derivativeDependencies [Object] (12): {
            ConstantNodeDependencies: <circular value object>
            FunctionNodeDependencies: <circular value object>
            OperatorNodeDependencies: <circular value object>
            ParenthesisNodeDependencies: <circular value object>
            SymbolNodeDependencies: <circular value object>
            equalDependencies: <circular value object>
            isZeroDependencies: <circular value object>
            numericDependencies: <circular value object>
            parseDependencies: <circular value object>
            simplifyDependencies: <circular value object>
            typedDependencies: <circular value object>
            createDerivative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rationalizeDependencies [Object] (18): {
            bignumberDependencies: <circular value object>
            fractionDependencies: <circular value object>
            ConstantNodeDependencies: <circular value object>
            FunctionNodeDependencies: <circular value object>
            OperatorNodeDependencies: <circular value object>
            ParenthesisNodeDependencies: <circular value object>
            SymbolNodeDependencies: <circular value object>
            addDependencies: <circular value object>
            divideDependencies: <circular value object>
            equalDependencies: <circular value object>
            isZeroDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            parseDependencies: <circular value object>
            powDependencies: <circular value object>
            simplifyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createRationalize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        reviverDependencies [Object] (1): {
            createReviver [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        replacerDependencies [Object] (1): {
            createReplacer [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        eDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        EDependencies [Object] (2): {
            eDependencies: <circular value object>
            createUppercaseE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        falseDependencies [Object] (1): {
            createFalse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        iDependencies [Object] (2): {
            ComplexDependencies: <circular value object>
            createI [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        InfinityDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createInfinity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        LN10Dependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createLN10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        LN2Dependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createLN2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        LOG10EDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createLOG10E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        LOG2EDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createLOG2E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        NaNDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        nullDependencies [Object] (1): {
            createNull [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        phiDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createPhi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        piDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createPi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        PIDependencies [Object] (2): {
            piDependencies: <circular value object>
            createUppercasePi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        SQRT1_2Dependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createSQRT1_2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        SQRT2Dependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createSQRT2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        tauDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createTau [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        trueDependencies [Object] (1): {
            createTrue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        versionDependencies [Object] (1): {
            createVersion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        atomicMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createAtomicMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        avogadroDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createAvogadro [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bohrMagnetonDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createBohrMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        bohrRadiusDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createBohrRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        boltzmannDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        classicalElectronRadiusDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createClassicalElectronRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        conductanceQuantumDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        coulombDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createCoulomb [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        deuteronMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createDeuteronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        efimovFactorDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createEfimovFactor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        electricConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createElectricConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        electronMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createElectronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        elementaryChargeDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createElementaryCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        faradayDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createFaraday [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        fermiCouplingDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createFermiCoupling [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        fineStructureDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createFineStructure [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        firstRadiationDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createFirstRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        gasConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createGasConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        gravitationConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createGravitationConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        gravityDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createGravity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        hartreeEnergyDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createHartreeEnergy [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        inverseConductanceQuantumDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createInverseConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        klitzingDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createKlitzing [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        loschmidtDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createLoschmidt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        magneticConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMagneticConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        magneticFluxQuantumDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMagneticFluxQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        molarMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMolarMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        molarMassC12Dependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMolarMassC12 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        molarPlanckConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMolarPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        molarVolumeDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createMolarVolume [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        neutronMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createNeutronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        nuclearMagnetonDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createNuclearMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckChargeDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckLengthDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckLength [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckTemperatureDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckTemperature [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        planckTimeDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createPlanckTime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        protonMassDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createProtonMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        quantumOfCirculationDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createQuantumOfCirculation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        reducedPlanckConstantDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createReducedPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rydbergDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createRydberg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sackurTetrodeDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createSackurTetrode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        secondRadiationDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createSecondRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        speedOfLightDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createSpeedOfLight [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        stefanBoltzmannDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createStefanBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        thomsonCrossSectionDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createThomsonCrossSection [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        vacuumImpedanceDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createVacuumImpedance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        weakMixingAngleDependencies [Object] (2): {
            BigNumberDependencies: <circular value object>
            createWeakMixingAngle [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        wienDisplacementDependencies [Object] (3): {
            BigNumberDependencies: <circular value object>
            UnitDependencies: <circular value object>
            createWienDisplacement [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        applyTransformDependencies [Object] (3): {
            isIntegerDependencies: <circular value object>
            typedDependencies: <circular value object>
            createApplyTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        columnTransformDependencies [Object] (5): {
            IndexDependencies: <circular value object>
            matrixDependencies: <circular value object>
            rangeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createColumnTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        filterTransformDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createFilterTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        forEachTransformDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createForEachTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        indexTransformDependencies [Object] (2): {
            IndexDependencies: <circular value object>
            createIndexTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        mapTransformDependencies [Object] (2): {
            typedDependencies: <circular value object>
            createMapTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        maxTransformDependencies [Object] (4): {
            largerDependencies: <circular value object>
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMaxTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        meanTransformDependencies [Object] (4): {
            addDependencies: <circular value object>
            divideDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMeanTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        minTransformDependencies [Object] (4): {
            numericDependencies: <circular value object>
            smallerDependencies: <circular value object>
            typedDependencies: <circular value object>
            createMinTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rangeTransformDependencies [Object] (8): {
            bignumberDependencies: <circular value object>
            matrixDependencies: <circular value object>
            largerDependencies: <circular value object>
            largerEqDependencies: <circular value object>
            smallerDependencies: <circular value object>
            smallerEqDependencies: <circular value object>
            typedDependencies: <circular value object>
            createRangeTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        rowTransformDependencies [Object] (5): {
            IndexDependencies: <circular value object>
            matrixDependencies: <circular value object>
            rangeDependencies: <circular value object>
            typedDependencies: <circular value object>
            createRowTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        subsetTransformDependencies [Object] (3): {
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSubsetTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        concatTransformDependencies [Object] (4): {
            isIntegerDependencies: <circular value object>
            matrixDependencies: <circular value object>
            typedDependencies: <circular value object>
            createConcatTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        stdTransformDependencies [Object] (4): {
            sqrtDependencies: <circular value object>
            typedDependencies: <circular value object>
            varianceDependencies: <circular value object>
            createStdTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        sumTransformDependencies [Object] (4): {
            addDependencies: <circular value object>
            numericDependencies: <circular value object>
            typedDependencies: <circular value object>
            createSumTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        varianceTransformDependencies [Object] (8): {
            addDependencies: <circular value object>
            applyDependencies: <circular value object>
            divideDependencies: <circular value object>
            isNaNDependencies: <circular value object>
            multiplyDependencies: <circular value object>
            subtractDependencies: <circular value object>
            typedDependencies: <circular value object>
            createVarianceTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        all [Object] (320): {
            createTyped [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createResultSet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBigNumberClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createComplexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFractionClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRangeClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createClone [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsInteger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsNegative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createHasNumericValue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsPositive [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsZero [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTypeOf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEqualScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSparseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createString [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBoolean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBignumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createComplex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFraction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMatrix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSplitUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUnaryMinus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUnaryPlus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAbs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createApply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAddScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCbrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCeil [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCube [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createExp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createExpm1 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFloor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLcm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLog10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLog2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMod [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMultiplyScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNthRoot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSign [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSqrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSquare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSubtract [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createXgcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDotMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBitAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBitNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBitOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBitXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createArg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConj [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRe [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConcat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createColumn [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCross [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDiag [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFilter [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFlatten [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createForEach [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGetMatrixDataType [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIdentity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createKron [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMap [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createOnes [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRange [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createReshape [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createResize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSqueeze [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCtranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createZeros [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createErf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createProd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFormat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPrint [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTo [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIsPrime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDivideScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRound [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLog [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLog1p [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNthRoots [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDotPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDotDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLeftShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRightArithShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRightLogShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCompare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCompareNatural [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCompareText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEqualText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSmaller [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSmallerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLarger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLargerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDeepEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUnequal [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPartitionSelect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSort [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMax [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createImmutableDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIndexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFibonacciHeapClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSpaClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUnitClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUnitFunction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSparse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCreateUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAcsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAsec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAsech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAsin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAsinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAtan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAtan2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAtanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetCartesian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetDistinct [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetIsSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetMultiplicity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetPowerset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetSymDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSetUnion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAdd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createHypot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNorm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTrace [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIndex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAccessorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createArrayNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBlockNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConditionalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConstantNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFunctionAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIndexNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createObjectNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createOperatorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createParenthesisNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRangeNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRelationalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSymbolNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFunctionNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createParse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCompile [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEvaluate [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createParserClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createParser [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLup [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createQr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSlu [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLusolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createHelpClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createChainClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createHelp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createChain [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createInv [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEigs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createExpm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSqrtm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDistance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMedian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMad [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createVariance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createQuantileSeq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createStd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCombinations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCombinationsWithRep [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGamma [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFactorial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createKldivergence [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMultinomial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPermutations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPickRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRandomInt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createStirlingS2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBellNumbers [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCatalan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createComposition [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSimplify [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDerivative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRationalize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createReviver [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createReplacer [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUppercaseE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFalse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createI [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createInfinity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLN10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLN2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLOG10E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLOG2E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNull [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPhi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createUppercasePi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSQRT1_2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSQRT2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTau [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createTrue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createVersion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAtomicMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createAvogadro [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBohrMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBohrRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createClassicalElectronRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createCoulomb [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createDeuteronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createEfimovFactor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createElectricConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createElectronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createElementaryCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFaraday [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFermiCoupling [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFineStructure [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFirstRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGasConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGravitationConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createGravity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createHartreeEnergy [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createInverseConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createKlitzing [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createLoschmidt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMagneticConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMagneticFluxQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMolarMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMolarMassC12 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMolarPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMolarVolume [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNeutronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createNuclearMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckLength [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckTemperature [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createPlanckTime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createProtonMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createQuantumOfCirculation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createReducedPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRydberg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSackurTetrode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSecondRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSpeedOfLight [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createStefanBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createThomsonCrossSection [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createVacuumImpedance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createWeakMixingAngle [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createWienDisplacement [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createApplyTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createColumnTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createFilterTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createForEachTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createIndexTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMapTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMaxTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMeanTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createMinTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRangeTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createRowTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSubsetTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createConcatTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createStdTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createSumTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
            createVarianceTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
              // we only pass the requested dependencies to the factory function
              // to prevent functions to rely on dependencies that are not explicitly
              // requested.
              var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
              assertDependencies(name, dependencies, scope);
              return create(deps);
            }
        }
        createTyped [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createResultSet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBigNumberClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createComplexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFractionClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRangeClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createClone [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsInteger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsNegative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createHasNumericValue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsPositive [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsZero [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTypeOf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEqualScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSparseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createString [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBoolean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBignumber [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createComplex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFraction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMatrix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSplitUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUnaryMinus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUnaryPlus [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAbs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createApply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAddScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCbrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCeil [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCube [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createExp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createExpm1 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFix [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFloor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLcm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLog10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLog2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMod [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMultiplyScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNthRoot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSign [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSqrt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSquare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSubtract [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createXgcd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDotMultiply [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBitAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBitNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBitOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBitXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createArg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConj [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRe [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createOr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createXor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConcat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createColumn [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCross [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDiag [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFilter [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFlatten [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createForEach [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGetMatrixDataType [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIdentity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createKron [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMap [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createOnes [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRange [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createReshape [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createResize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSqueeze [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCtranspose [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createZeros [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createErf [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createProd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFormat [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPrint [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTo [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIsPrime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNumeric [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDivideScalar [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRound [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLog [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLog1p [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNthRoots [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDotPow [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDotDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUsolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLeftShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRightArithShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRightLogShift [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAnd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCompare [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCompareNatural [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCompareText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEqualText [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSmaller [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSmallerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLarger [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLargerEq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDeepEqual [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUnequal [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPartitionSelect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSort [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMax [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createImmutableDenseMatrixClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIndexClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFibonacciHeapClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSpaClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUnitClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUnitFunction [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSparse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCreateUnit [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAcsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAsec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAsech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAsin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAsinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAtan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAtan2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAtanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCos [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCosh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCoth [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCsc [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCsch [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSec [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSech [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSin [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSinh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTanh [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetCartesian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetDistinct [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetIsSubset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetMultiplicity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetPowerset [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetSize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetSymDifference [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSetUnion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAdd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createHypot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNorm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDot [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTrace [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIndex [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAccessorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createArrayNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBlockNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConditionalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConstantNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFunctionAssignmentNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIndexNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createObjectNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createOperatorNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createParenthesisNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRangeNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRelationalNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSymbolNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFunctionNode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createParse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCompile [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEvaluate [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createParserClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createParser [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLup [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createQr [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSlu [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLusolve [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createHelpClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createChainClass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createHelp [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createChain [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDet [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createInv [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEigs [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createExpm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSqrtm [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDivide [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDistance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIntersect [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMean [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMedian [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMad [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createVariance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createQuantileSeq [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createStd [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCombinations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCombinationsWithRep [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGamma [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFactorial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createKldivergence [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMultinomial [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPermutations [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPickRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRandom [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRandomInt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createStirlingS2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBellNumbers [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCatalan [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createComposition [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSimplify [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDerivative [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRationalize [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createReviver [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createReplacer [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUppercaseE [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFalse [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createI [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createInfinity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLN10 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLN2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLOG10E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLOG2E [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNaN [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNull [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPhi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createUppercasePi [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSQRT1_2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSQRT2 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTau [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createTrue [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createVersion [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAtomicMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createAvogadro [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBohrMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBohrRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createClassicalElectronRadius [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createCoulomb [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createDeuteronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createEfimovFactor [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createElectricConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createElectronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createElementaryCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFaraday [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFermiCoupling [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFineStructure [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFirstRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGasConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGravitationConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createGravity [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createHartreeEnergy [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createInverseConductanceQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createKlitzing [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createLoschmidt [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMagneticConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMagneticFluxQuantum [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMolarMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMolarMassC12 [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMolarPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMolarVolume [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNeutronMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createNuclearMagneton [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckCharge [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckLength [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckTemperature [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createPlanckTime [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createProtonMass [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createQuantumOfCirculation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createReducedPlanckConstant [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRydberg [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSackurTetrode [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSecondRadiation [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSpeedOfLight [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createStefanBoltzmann [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createThomsonCrossSection [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createVacuumImpedance [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createWeakMixingAngle [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createWienDisplacement [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createApplyTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createColumnTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createFilterTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createForEachTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createIndexTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMapTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMaxTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMeanTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createMinTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRangeTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createRowTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSubsetTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createConcatTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createStdTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createSumTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
        createVarianceTransform [Function] (8 lines): assertAndCreate function assertAndCreate(scope) {
          // we only pass the requested dependencies to the factory function
          // to prevent functions to rely on dependencies that are not explicitly
          // requested.
          var deps = (0, _object.pickShallow)(scope, dependencies.map(stripOptionalNotation));
          assertDependencies(name, dependencies, scope);
          return create(deps);
        }
    }
}
